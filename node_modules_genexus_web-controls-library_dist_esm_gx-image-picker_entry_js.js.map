{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-image-picker_entry_js.js","mappings":";;;;;;;;;;;;;;AAA6G;;AAE7G,uCAAuC,oBAAoB,4BAA4B,oCAAoC,gBAAgB,gBAAgB,kBAAkB,kBAAkB,gBAAgB,gCAAgC,oCAAoC,sCAAsC,kCAAkC,oBAAoB,aAAa,WAAW,OAAO,oBAAoB,+BAA+B,iBAAiB,oBAAoB,mDAAmD,kBAAkB,eAAe,gBAAgB,0EAA0E,kBAAkB,QAAQ,WAAW,oBAAoB,sFAAsF,2BAA2B,mBAAmB,yBAAyB,oBAAoB,aAAa,qBAAqB,uBAAuB,sBAAsB,mBAAmB,oBAAoB,WAAW,YAAY,mBAAmB,6BAA6B,qBAAqB,4GAA4G,sBAAsB,yNAAyN,aAAa,6GAA6G,sBAAsB,gGAAgG,2BAA2B,mBAAmB,sBAAsB,0FAA0F,WAAW,YAAY,8DAA8D,oBAAoB,aAAa,yBAAyB,6BAA6B,oEAAoE,oBAAoB,aAAa,eAAe,UAAU,WAAW,0EAA0E,QAAQ,iFAAiF,2BAA2B,sBAAsB,0BAA0B,WAAW,6DAA6D,qDAAqD,6EAA6E,2BAA2B,sBAAsB,sBAAsB,sBAAsB,iEAAiE,yBAAyB,sEAAsE,gBAAgB,gCAAgC,WAAW,YAAY,wBAAwB,SAAS;;AAE34F;AACA;AACA,QAAQ,qDAAgB;AACxB,qBAAqB,qDAAW;AAChC,8BAA8B,qDAAW;AACzaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAC,UAAU,sBAAsB,EAAE,qDAAC,WAAW,iPAAiP,GAAG,qDAAC,WAAW,kCAAkC;AACjW;AACA;AACA;AACA,gBAAgB,qDAAC,UAAU,0BAA0B,EAAE,qDAAC,WAAW,ueAAue;AAC1iB;AACA;AACA;AACA,gBAAgB,qDAAC,UAAU,wIAAwI,EAAE,qDAAC,WAAW,iNAAiN,EAAE,qDAAC,uBAAuB,4IAA4I;AACxiB;AACA;AACA,gBAAgB,qDAAC,CAAC,iDAAI,IAAI,0BAA0B,EAAE,qDAAC,UAAU,uDAAuD,EAAE,qDAAC,eAAe,wVAAwV,qBAAqB,qDAAC,UAAU;AAClgB;AACA;AACA,eAAe,mCAAmC,qDAAC,aAAa,gHAAgH;AAChL;AACA,yEAAyE,qDAAC,eAAe,sDAAsD,EAAE,qDAAC,UAAU,gBAAgB,gEAAgE,qDAAC,UAAU,uCAAuC,EAAE,qDAAC,YAAY,eAAe,EAAE,qDAAC,YAAY,kGAAkG,GAAG,qDAAC,WAAW,sBAAsB,2BAA2B,qDAAC,gBAAgB,wDAAwD,2BAA2B,qDAAC,UAAU,0BAA0B,EAAE,qDAAC,gBAAgB,mDAAmD,EAAE,qDAAC;AAC/rB;AACA,oBAAoB,OAAO,qDAAU;AACrC;AACA;;AAE0C","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-image-picker.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';\n\nconst imagePickerCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-image-picker{margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;pointer-events:none}gx-image-picker .click-capture{display:contents;pointer-events:auto}gx-image-picker .click-capture .image-viewer-image{position:relative;min-width:30px;min-height:30px}gx-image-picker .click-capture .image-viewer-image .button-edit-container{position:absolute;right:0;z-index:99;pointer-events:none}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit{border:0.075rem solid #ddd;border-radius:15px;background-color:#efefef;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;padding:0 0 0 2.5px;width:30px;height:30px;pointer-events:all;-webkit-transition:0.2s ease;transition:0.2s ease}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):hover{background-color:#ddd}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):focus,gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):active{outline:none}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):active{background-color:#ccc}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit[disabled]{border:0.075rem solid #aaa;border-radius:15px;background-color:#ccc}gx-image-picker .click-capture .image-viewer-image .button-edit-container .image-edit svg{width:18px;height:18px}gx-image-picker .click-capture .action-dialog .body-container{display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around}gx-image-picker .click-capture .action-dialog .body-container .file{display:-ms-flexbox;display:flex;cursor:pointer;width:40%;margin:0px}gx-image-picker .click-capture .action-dialog .body-container .file input{width:0}gx-image-picker .click-capture .action-dialog .body-container .file .file-custom{border:0.075rem solid #ddd;border-radius:0.25rem;padding:5px 12px 5px 12px;width:100%;-webkit-box-shadow:inset 0 0.2rem 0.4rem rgba(0, 0, 0, 0.05);box-shadow:inset 0 0.2rem 0.4rem rgba(0, 0, 0, 0.05)}gx-image-picker .click-capture .action-dialog .body-container .remove-button{border:0.075rem solid #ddd;border-radius:0.25rem;padding:0 12px 0 12px;background-color:#eee}gx-image-picker .click-capture .action-dialog div .cancel-button{padding:2px 8px 2px 12px}gx-image-picker .click-capture .action-dialog div .cancel-button span{font-weight:500}gx-image-picker .uploading-file{width:30px;height:30px}gx-image-picker .bottom{bottom:0}\";\n\nconst ImagePicker = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.click = createEvent(this, \"click\", 7);\n        this.onImageChanged = createEvent(this, \"onImageChanged\", 7);\n        /**\n         * This attribute lets you specify the alternative text.\n         */\n        this.alt = \"\";\n        /**\n         * If true, the component will be sized to match the image's intrinsic size when not constrained\n         * via CSS dimension properties (for example, height or width).\n         * If false, the component will never force its height to match the image's intrinsic size. The width, however,\n         * will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.\n         */\n        this.autoGrow = true;\n        /**\n         * This attribute lets you specify if the element is disabled.\n         * If disabled, it will not fire any user interaction related event\n         * (for example, click event).\n         */\n        this.disabled = false;\n        /**\n         * This attribute lets you specify how this element will behave when hidden.\n         *\n         * | Value        | Details                                                                     |\n         * | ------------ | --------------------------------------------------------------------------- |\n         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |\n         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |\n         */\n        this.invisibleMode = \"collapse\";\n        /**\n         * True to lazy load the image, when it enters the viewport.\n         */\n        this.lazyLoad = true;\n        /**\n         * This attribute lets you specify the low resolution image SRC.\n         */\n        this.lowResolutionSrc = \"\";\n        /**\n         * This attribute lets you specify the SRC.\n         */\n        this.src = \"\";\n        /**\n         * True to highlight control when an action is fired.\n         */\n        this.highlightable = false;\n        /**\n         * This attribute lets you specify if the image is readonly.\n         * If readonly, it will not allow to use the edit button.\n         * In fact, the edit button will not be shown.\n         */\n        this.readonly = false;\n        /**\n         * This attribute lets you specify the modal title.\n         */\n        this.modalTitle = null;\n        /**\n         * This attribute lets you specify the description of the\n         * change image button in the modal.\n         */\n        this.changeButtonText = \"Change image...\";\n        /**\n         * This attribute lets you specify the description of the\n         * remove image button in the modal.\n         */\n        this.removeButtonText = \"Remove image\";\n        /**\n         * This attribute lets you specify the description of the\n         * cancel action button in the modal.\n         */\n        this.cancelButtonText = \"CANCEL\";\n        /**\n         * This attribute lets you specify the current state of the gx-image-picker.\n         *\n         * | Value               | Details                                                                                      |\n         * | ------------------- | -------------------------------------------------------------------------------------------- |\n         * | `readyToUse`        | Allows you to choose, change or remove an image.                                             |\n         * | `fileReadyToUpload` | It is set only after an image has been selected or changed, not removed.                     |\n         * | `uploadingFile`     | It is set by the parent control to specifies when the image is being uploaded to the server. |\n         *\n         * `fileReadyToUpload` and `uploadingFile` will not allow you to change or remove the current image.\n         */\n        this.state = \"readyToUse\";\n        // Used to read the images\n        this.reader = new FileReader();\n        // Emits the image click event\n        this.clickImageAction = (event) => {\n            this.click.emit(event);\n        };\n        // If there is no image, this directly opens the File System to select an image.\n        // In othercase, this allows to change or remove the image\n        this.triggerAction = (event) => {\n            if (this.src === \"\") {\n                this.input.click();\n            }\n            else {\n                this.modal.opened = true;\n            }\n            event.stopPropagation();\n        };\n        this.clearImageAction = () => {\n            this.input.value = \"\";\n            this.src = \"\";\n            this.alt = \"\";\n            this.onImageChanged.emit(null);\n            this.closeAction();\n        };\n        // When the modal closes\n        this.closeAction = () => {\n            this.modal.opened = false;\n        };\n        // When the file is selected\n        this.fileSelectedAction = () => {\n            const elem = this.element;\n            const file = this.input.files[0];\n            // This allows to catch an error when the user select a filename, but then\n            // cancels the operation\n            if (file == null) {\n                return;\n            }\n            this.state = \"fileReadyToUpload\";\n            this.alt = this.getFileNameWithoutExtension(file.name);\n            this.reader.addEventListener(\"load\", function () {\n                // Convert image file to base64 string\n                elem.src = this.result.toString();\n            }, false);\n            this.reader.readAsDataURL(file);\n            this.closeAction();\n            this.onImageChanged.emit(file);\n        };\n    }\n    stopPropagation(event) {\n        event.stopPropagation();\n    }\n    getFileNameWithoutExtension(fileName) {\n        const index = fileName.lastIndexOf(\".\");\n        if (index === -1) {\n            return fileName;\n        }\n        else {\n            return fileName.substring(0, index);\n        }\n    }\n    // SVG used to print the search image button\n    getSearchPlusSolidSVG() {\n        return (h(\"svg\", { viewBox: \"3 2 20 20\" }, h(\"path\", { d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" }), h(\"path\", { d: \"M0 0h24v24H0z\", fill: \"none\" })));\n    }\n    // SVG used to print the change image button\n    getPencilAltSolidSVG() {\n        return (h(\"svg\", { viewBox: \"0 -35 570 570\" }, h(\"path\", { fill: \"black\", d: \"M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z\" })));\n    }\n    // SVG used to display when an image is being uploaded to the server\n    getLoadingSVG() {\n        return (h(\"svg\", { class: \"uploading-file\", version: \"1.1\", id: \"loader-1\", xmlns: \"http://www.w3.org/2000/svg\", x: \"0px\", y: \"0px\", viewBox: \"5 5 40 40\" }, h(\"path\", { fill: \"rgba(96, 96, 96, 0.6)\", d: \"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\" }, h(\"animateTransform\", { attributeType: \"xml\", attributeName: \"transform\", type: \"rotate\", from: \"0 25 25\", to: \"360 25 25\", dur: \"0.6s\", repeatCount: \"indefinite\" }))));\n    }\n    render() {\n        return (h(Host, { \"data-part\": \"container\" }, h(\"div\", { class: \"click-capture\", onClick: this.stopPropagation }, h(\"gx-image\", { class: \"image-viewer-image\", alt: this.alt, autoGrow: this.autoGrow, disabled: this.disabled, height: this.height, invisibleMode: this.invisibleMode, lazyLoad: this.lazyLoad, lowResolutionSrc: this.lowResolutionSrc, scaleType: this.scaleType, src: this.src, width: this.width, highlightable: this.highlightable, onClick: this.clickImageAction }, !this.readonly && (h(\"div\", { class: {\n                \"button-edit-container\": true,\n                bottom: this.src !== \"\"\n            } }, this.state != \"uploadingFile\" ? (h(\"button\", { class: \"image-edit\", disabled: this.disabled || this.state == \"fileReadyToUpload\", onClick: this.triggerAction }, this.src === \"\"\n            ? this.getSearchPlusSolidSVG()\n            : this.getPencilAltSolidSVG())) : (this.getLoadingSVG())))), h(\"gx-modal\", { class: \"action-dialog\", ref: el => (this.modal = el) }, h(\"div\", { slot: \"header\" }, this.modalTitle === null ? document.title : this.modalTitle), h(\"div\", { class: \"body-container\", slot: \"body\" }, h(\"label\", { class: \"file\" }, h(\"input\", { type: \"file\", onChange: this.fileSelectedAction, ref: el => (this.input = el), accept: \"image/*\" }), h(\"span\", { class: \"file-custom\" }, this.changeButtonText)), h(\"gx-button\", { class: \"remove-button\", onClick: this.clearImageAction }, this.removeButtonText)), h(\"div\", { slot: \"secondary-action\" }, h(\"gx-button\", { class: \"cancel-button\", onClick: this.closeAction }, h(\"span\", null, this.cancelButtonText)))))));\n    }\n    get element() { return getElement(this); }\n};\nImagePicker.style = imagePickerCss;\n\nexport { ImagePicker as gx_image_picker };\n"],"names":[],"sourceRoot":"webpack:///"}