"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-radio-option_entry_js"],{

/***/ 4129:
/*!**************************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-radio-option.entry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_radio_option": () => (/* binding */ RadioOption)
/* harmony export */ });
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


let autoRadioId = 0;
class RadioOptionRender {
    constructor(component) {
        this.component = component;
    }
    getNativeInputId() {
        return this.getNativeInput().id;
    }
    getNativeInput() {
        return this.component.element.querySelector("[data-native-element]");
    }
    getCssClasses() {
        const classList = [];
        classList.push("control-input");
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        if (!this.component.caption) {
            classList.push("position-static");
        }
        return classList.join(" ");
    }
    getInnerControlContainerClass() {
        const classList = ["container"];
        if (this.component.disabled) {
            classList.push("disabled");
        }
        return classList.join(" ");
    }
    handleClick() {
        this.checkedChanged(true);
    }
    handleChange(event) {
        this.component.checked = true;
        const nativeInput = this.getNativeInput();
        nativeInput.focus();
        this.component.change.emit(event);
    }
    checkedChanged(isChecked) {
        const nativeInput = this.getNativeInput();
        const inputEl = nativeInput;
        if (inputEl && inputEl.checked !== isChecked) {
            inputEl.checked = isChecked;
        }
        clearTimeout(this.checkedTmr);
        this.checkedTmr = setTimeout(() => {
            // only emit onSelect when checked is true
            if (this.didLoad && isChecked) {
                this.component.gxSelect.emit({
                    checked: isChecked,
                    value: this.component.value
                });
            }
        });
    }
    disabledChanged(isDisabled) {
        const nativeInput = this.getNativeInput();
        nativeInput.disabled = isDisabled;
    }
    componentDidLoad() {
        this.didLoad = true;
    }
    render() {
        const radioOption = this.component;
        if (!this.inputId) {
            this.inputId = radioOption.element.id
                ? `${radioOption.element.id}__radio-option`
                : `gx-radio-auto-id-${autoRadioId++}`;
        }
        const attris = {
            "aria-disabled": radioOption.disabled ? "true" : undefined,
            class: this.getCssClasses(),
            "data-native-element": "",
            disabled: radioOption.disabled,
            id: this.inputId,
            name: radioOption.name,
            onChange: this.handleChange.bind(this),
            onClick: this.handleClick.bind(this),
            value: radioOption.value
        };
        const forAttris = {
            for: attris.id
        };
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.getInnerControlContainerClass(), "data-part": !radioOption.disabled ? "option-control" : "" },
            (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "option-container" },
                (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", Object.assign({}, attris, { type: "radio", checked: radioOption.checked })),
                (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "custom-option" }),
                (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { viewBox: "-8 -8 16 16" },
                    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { r: "3" }))),
            (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", Object.assign({ class: "custom-label" }, forAttris), radioOption.caption)));
    }
}

const radioOptionCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-radio-option{display:block;--option-checked-color:#007bff;--option-border:1px solid #adb5bd;--option-border-radius:100%;--option-highlight-border-color:#007bff40}gx-radio-option[hidden]{display:none !important}gx-radio-option[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-radio-option .container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:start;justify-content:flex-start;-ms-flex:1;flex:1;overflow:hidden}gx-radio-option .container[data-part=option-control]:active{padding:0;background-color:unset;border:unset}gx-radio-option .container .option-container{display:-ms-flexbox;display:flex;padding:0.15rem 0.35rem 0.15rem 0.35rem}gx-radio-option .container .option-container .control-input{width:1rem;height:1rem;opacity:0}gx-radio-option .container .option-container .control-input:checked~.custom-option{border-color:var(--option-checked-color);background-color:var(--option-checked-color)}gx-radio-option .container .option-container .control-input:checked~svg{opacity:100}gx-radio-option .container .option-container .control-input:active:not(:disabled):not(:checked)~.custom-option{border-color:var(--option-highlight-border-color);background-color:var(--option-highlight-border-color)}gx-radio-option .container .option-container .control-input:active:not(:disabled)~.custom-option{-webkit-filter:brightness(85%);filter:brightness(85%)}gx-radio-option .container .option-container .control-input:focus~.custom-option{-webkit-box-shadow:0 0 0 0.15rem var(--option-highlight-border-color);box-shadow:0 0 0 0.15rem var(--option-highlight-border-color)}gx-radio-option .container .option-container .control-input:disabled~.custom-option{background-color:#a5a8aac0}gx-radio-option .container .option-container .custom-option{position:absolute;width:1rem;height:1rem;pointer-events:none;border:var(--option-border);border-radius:var(--option-border-radius);content:\"\";-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-radio-option .container .option-container svg{position:absolute;width:1rem;height:1rem;pointer-events:none;z-index:1;opacity:0;fill:white;fill-opacity:0.75;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-radio-option .container .custom-label{margin:0;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}";

const RadioOption = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.change = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "change", 7);
        this.gxSelect = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "gxSelect", 7);
        this.gxRadioDidLoad = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "gxRadioDidLoad", 7);
        this.gxRadioDidUnload = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "gxRadioDidUnload", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new RadioOptionRender(this);
    }
    checkedChanged(isChecked) {
        this.renderer.checkedChanged(isChecked);
    }
    disabledChanged(isDisabled) {
        this.renderer.disabledChanged(isDisabled);
    }
    componentDidLoad() {
        this.gxRadioDidLoad.emit({ radio: this });
        this.renderer.componentDidLoad();
    }
    componentDidUnload() {
        this.gxRadioDidUnload.emit({ radio: this });
    }
    render() {
        return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderer.render());
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "checked": ["checkedChanged"],
        "disabled": ["disabledChanged"]
    }; }
};
RadioOption.style = radioOptionCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-radio-option_entry_js.js.map