{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-interactive-image_entry_js.js","mappings":";;;;;;;;;;;;;;AAAgF;;AAEhF,4CAA4C,oBAAoB,4BAA4B,oCAAoC,gBAAgB,gBAAgB,kBAAkB,kBAAkB,qBAAqB,YAAY,WAAW,oBAAoB,aAAa,gBAAgB,6BAA6B,wBAAwB,wDAAwD,+BAA+B,wBAAwB,kBAAkB,yBAAyB,YAAY,WAAW;;AAEvgB;AACA;AACA,QAAQ,qDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAC,UAAU;AAC3B;AACA,0CAA0C,qBAAqB,KAAK,qBAAqB;AACzF,wCAAwC,gBAAgB;AACxD;AACA,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,OAAO,qDAAU;AACrC;AACA;;AAEoD","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-interactive-image.entry.js"],"sourcesContent":["import { r as registerInstance, h, g as getElement } from './index-10623738.js';\n\nconst interactiveImageCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-interactive-image{height:auto;width:auto;display:-ms-flexbox;display:flex;overflow:hidden}gx-interactive-image[hidden]{display:none !important}gx-interactive-image[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-interactive-image img{height:100%;width:100%}\";\n\nconst InteractiveImage = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * True/False. If this property is true, the user can zoom in/out on the image.\n         */\n        this.enableZoom = false;\n        /**\n         * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.\n         */\n        this.zoom = 100;\n        /**\n         * Lets you specify the image URL. *Requiered*\n         */\n        this.src = \"\";\n        this.mouseOver = false;\n        this.handleMouseMove = ev => {\n            ev.preventDefault();\n            this.mouseOver = true;\n            this.zoomedPositionX = this.calculateZoomedPosition(ev.offsetX, ev.target.offsetWidth);\n            this.zoomedPositionY = this.calculateZoomedPosition(ev.offsetY, ev.target.offsetHeight);\n        };\n        this.handleTouchMove = ev => {\n            ev.preventDefault();\n            this.mouseOver = true;\n            const imgSize = {\n                height: ev.target.offsetHeight,\n                width: ev.target.offsetWidth\n            };\n            const touch = {\n                X: ev.changedTouches[0].clientX - ev.target.x,\n                Y: ev.changedTouches[0].clientY -\n                    ev.target.parentNode.getBoundingClientRect().top\n            };\n            if (touch.X <= 0) {\n                touch.X = 0;\n            }\n            else if (touch.X >= imgSize.width) {\n                touch.X = imgSize.width;\n            }\n            if (touch.Y <= 0) {\n                touch.Y = 0;\n            }\n            else if (touch.Y >= imgSize.height) {\n                touch.Y = imgSize.height;\n            }\n            const moveImgPostion = {\n                X: this.calculateZoomTouch(this.calculateZoomedPosition(touch.X, ev.target.offsetWidth), this.zoom),\n                Y: this.calculateZoomTouch(this.calculateZoomedPosition(touch.Y, imgSize.height), this.zoom)\n            };\n            this.zoomedPositionX = moveImgPostion.X;\n            this.zoomedPositionY = moveImgPostion.Y;\n        };\n        this.handleOverEnd = () => {\n            this.mouseOver = false;\n        };\n    }\n    calculateZoomedPosition(overPosition, elementSize) {\n        const SCALE = this.zoom / 100;\n        const HALF_SIZE_PERCENTAGE = 50;\n        const HALF_SIZE_PIXELS = (elementSize * HALF_SIZE_PERCENTAGE) / 100;\n        return -(overPosition - HALF_SIZE_PIXELS) * (SCALE - 1);\n    }\n    calculateZoomTouch(preCalculateValue, zoom) {\n        const SCALE = zoom / 100;\n        return preCalculateValue / SCALE;\n    }\n    checkZoomFeature() {\n        if (this.enableZoom) {\n            const img = this.element.querySelector(\"img\");\n            img.addEventListener(\"mousemove\", this.handleMouseMove);\n            img.addEventListener(\"touchmove\", this.handleTouchMove);\n            img.addEventListener(\"mouseout\", this.handleOverEnd);\n            img.addEventListener(\"touchend\", this.handleOverEnd);\n        }\n        else {\n            const img = this.element.querySelector(\"img\");\n            img.removeEventListener(\"mousemove\", this.handleMouseMove);\n            img.removeEventListener(\"touchmove\", this.handleTouchMove);\n            img.removeEventListener(\"mouseout\", this.handleOverEnd);\n            img.removeEventListener(\"touchend\", this.handleOverEnd);\n        }\n    }\n    fixZoomValue() {\n        if (this.zoom < 100) {\n            console.warn(\"Zoom value cannot be lower than 100\");\n            this.zoom = 100;\n        }\n    }\n    componentWillLoad() {\n        this.fixZoomValue();\n    }\n    componentDidLoad() {\n        this.checkZoomFeature();\n    }\n    componentDidUpdate() {\n        this.checkZoomFeature();\n    }\n    render() {\n        this.fixZoomValue();\n        return (h(\"img\", { style: this.mouseOver\n                ? {\n                    \"object-position\": `${this.zoomedPositionX}px ${this.zoomedPositionY}px`,\n                    transform: `scale(${this.zoom / 100})`\n                }\n                : {}, src: this.src }));\n    }\n    get element() { return getElement(this); }\n};\nInteractiveImage.style = interactiveImageCss;\n\nexport { InteractiveImage as gx_interactive_image };\n"],"names":[],"sourceRoot":"webpack:///"}