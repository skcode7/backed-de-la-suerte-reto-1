"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-query-viewer_entry_js"],{

/***/ 179:
/*!**************************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-query-viewer.entry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_query_viewer": () => (/* binding */ QueryViewer)
/* harmony export */ });
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


const queryViewerCss = "gx-query-viewer{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}gx-query-viewer iframe{-ms-flex:1;flex:1;border:0}";

const QueryViewer = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.mapServices = {
            net: "gxqueryviewerforsd.aspx",
            java: "qviewer.services.gxqueryviewerforsd"
        };
        this.propsNotToPost = [
            "baseUrl",
            "env",
            "mapServices",
            "object",
            "objectCall",
            "propsNotToPost",
            "parameters",
            "elements",
            "dataVersionId"
        ];
        this.configurationObserver = new MutationObserver(() => {
            this.configurationChangedHandler();
        });
    }
    parameterValueChangedHandler(eventInfo) {
        eventInfo.stopPropagation();
        this.getParameters();
    }
    elementChangedHandler(eventInfo) {
        eventInfo.stopPropagation();
        this.getElements();
    }
    configurationChangedHandler() {
        this.getParameters();
        this.getElements();
    }
    componentWillLoad() {
        this.getParameters();
        this.getElements();
    }
    componentDidLoad() {
        this.configurationObserver.observe(this.element, {
            childList: true,
            subtree: true
        });
    }
    componentDidRender() {
        const form = this.element.querySelector("form");
        form.submit();
    }
    disconnectedCallback() {
        this.configurationObserver.disconnect();
    }
    parseObjectToObjectcall() {
        try {
            this.objectCall = JSON.parse(this.object);
        }
        catch (e) {
            this.objectCall = null;
        }
    }
    hasObjectCall() {
        return Array.isArray(this.objectCall) && this.objectCall.length >= 2;
    }
    loadObjectNameFromObjectCall() {
        if (this.hasObjectCall()) {
            this.objectName = this.objectCall[1];
        }
    }
    postData() {
        this.parseObjectToObjectcall();
        this.loadObjectNameFromObjectCall();
        return [
            ...Object.keys(QueryViewer.prototype)
                .filter(key => !this.propsNotToPost.includes(key))
                .map(key => (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "hidden", name: key, value: this[key] })),
            (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "hidden", name: "Elements", value: this.elements }),
            (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "hidden", name: "Parameters", value: this.parameters })
        ];
    }
    getParameters() {
        const parametersValue = [];
        if (this.hasObjectCall()) {
            this.objectCall.slice(2).forEach(value => {
                const parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(value);
                parameterObject["Name"] = "";
                parametersValue.push(parameterObject);
            });
        }
        else {
            const parameters = Array.from(document.getElementsByTagName("gx-query-viewer-parameter"));
            parameters.forEach(parameter => {
                const parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(parameter.Value);
                parameterObject["Name"] = parameter.Name;
                parametersValue.push(parameterObject);
            });
        }
        this.parameters = JSON.stringify(parametersValue);
    }
    getElements() {
        const elementsValue = [];
        const elements = Array.from(document.getElementsByTagName("gx-query-viewer-element"));
        elements.forEach(ax => {
            const elementObjectValue = {};
            elementObjectValue["Name"] = ax.name;
            elementObjectValue["Title"] = ax.elementTitle;
            elementObjectValue["Visible"] = ax.visible;
            elementObjectValue["Type"] = ax.type;
            elementObjectValue["Axis"] = ax.axis;
            elementObjectValue["Aggregation"] = ax.aggregation;
            elementObjectValue["DataField"] = ax.dataField;
            if (ax.axisOrderType) {
                elementObjectValue["AxisOrder"] = { Type: ax.axisOrderType };
                if (ax.axisOrderValues) {
                    elementObjectValue["AxisOrder"]["Values"] = ax.axisOrderValues;
                }
            }
            if (ax.filterType) {
                elementObjectValue["Filter"] = { Type: ax.filterType };
                if (ax.axisOrderValues) {
                    elementObjectValue["Filter"]["Values"] = ax.filterValues;
                }
            }
            if (ax.expandCollapseType) {
                elementObjectValue["ExpandCollapse"] = { Type: ax.expandCollapseType };
                if (ax.axisOrderValues) {
                    elementObjectValue["ExpandCollapse"]["Values"] =
                        ax.expandCollapseValues;
                }
            }
            const grouping = this.getGrouping(ax);
            if (Object.keys(grouping).length > 0) {
                elementObjectValue["Grouping"] = grouping;
            }
            if (ax.raiseItemClick) {
                const action = { RaiseItemClick: ax.raiseItemClick };
                elementObjectValue["Action"] = action;
            }
            const formats = Array.from(ax.getElementsByTagName("gx-query-viewer-element-format"));
            formats.forEach(format => {
                const formatObject = {};
                formatObject["Picture"] = format.picture;
                formatObject["Subtotals"] = format.subtotals;
                formatObject["CanDragToPages"] = format.canDragToPages;
                formatObject["Style"] = format.formatStyle;
                formatObject["TargetValue"] = format.targetValue;
                formatObject["MaximumValue"] = format.maximumValue;
                const styles = Array.from(ax.getElementsByTagName("gx-query-viewer-format-style"));
                const valuesStyles = [];
                const conditionalStyles = [];
                styles.forEach(style => {
                    if (style.type === "Values") {
                        const valueStyle = {
                            Value: style.value,
                            ApplyToRowOrColumn: style.applyToRowOrColumn,
                            StyleOrClass: style.styleOrClass
                        };
                        valuesStyles.push(valueStyle);
                    }
                    else {
                        const conditionalStyle = {
                            Value1: style.value1,
                            Value2: style.value2,
                            Operator: style.operator,
                            StyleOrClass: style.styleOrClass
                        };
                        conditionalStyles.push(conditionalStyle);
                    }
                });
                if (valuesStyles.length > 0) {
                    formatObject["ValuesStyle"] = valuesStyles;
                }
                if (conditionalStyles.length > 0) {
                    formatObject["ConditionalStyles"] = conditionalStyles;
                }
                elementObjectValue["Format"] = formatObject;
            });
            elementsValue.push(elementObjectValue);
        });
        this.elements = JSON.stringify(elementsValue);
    }
    getGrouping(ax) {
        const grouping = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (ax.groupingGroupByYear && { GroupByYear: ax.groupingGroupByYear })), (ax.groupingYearTitle && {
            YearTitle: ax.groupingYearTitle
        })), (ax.groupingGroupBySemester && {
            GroupBySemester: ax.groupingGroupBySemester
        })), (ax.groupingSemesterTitle && {
            SemesterTitle: ax.groupingSemesterTitle
        })), (ax.groupingGroupByQuarter && {
            GroupByQuarter: ax.groupingGroupByQuarter
        })), (ax.groupingQuarterTitle && { QuarterTitle: ax.groupingQuarterTitle })), (ax.groupingGroupByMonth && { GroupByMonth: ax.groupingGroupByMonth })), (ax.groupingMonthTitle && { MonthTitle: ax.groupingMonthTitle })), (ax.groupingGroupByDayOfWeek && {
            GroupByDayOfWeek: ax.groupingGroupByDayOfWeek
        })), (ax.groupingDayOfWeekTitle && {
            DayOfWeekTitle: ax.groupingDayOfWeekTitle
        })), (ax.groupingHideValue && { HideValue: ax.groupingHideValue })));
        return grouping;
    }
    render() {
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("iframe", { name: "query_viewer", "data-version-id": this.dataVersionId }), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("form", { hidden: true, target: "query_viewer", action: this.baseUrl + this.mapServices[this.env], method: "POST" }, this.postData())));
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
QueryViewer.style = queryViewerCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-query-viewer_entry_js.js.map