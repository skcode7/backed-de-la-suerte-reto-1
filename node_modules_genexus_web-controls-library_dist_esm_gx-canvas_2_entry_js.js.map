{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-canvas_2_entry_js.js","mappings":";;;;;;;;;;;;;;;;AAA6G;AAChD;;AAE7D,kCAAkC,oBAAoB,4BAA4B,oCAAoC,gBAAgB,gBAAgB,kBAAkB,kBAAkB,UAAU,cAAc,kBAAkB,kBAAkB,wBAAwB,6CAA6C,yBAAyB,kBAAkB;;AAEtW;AACA;AACA,QAAQ,qDAAgB;AACxB,uBAAuB,qDAAW;AAClC,qBAAqB,qDAAW;AAChC,uBAAuB,qDAAW;AAClC,0BAA0B,qDAAW;AACrC,yBAAyB,qDAAW;AACpC,yBAAyB,qDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAa;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2DAA2D,iBAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAC,CAAC,iDAAI,IAAI;AAC1B;AACA,yBAAyB,WAAW;AACpC;AACA;AACA,yBAAyB,YAAY;AACrC;AACA,eAAe,EAAE,qDAAC;AAClB;AACA,oBAAoB,OAAO,qDAAU;AACrC;AACA;;AAEA,sCAAsC,oBAAoB,4BAA4B,oCAAoC,gBAAgB,gBAAgB,kBAAkB,kBAAkB,eAAe,kBAAkB,oBAAoB,aAAa,uBAAuB,wBAAwB,kDAAkD,+BAA+B,wBAAwB,kBAAkB,mCAAmC,gBAAgB,qCAAqC,cAAc,2DAA2D,oBAAoB,2BAA2B,6BAA6B,qBAAqB,uBAAuB,4BAA4B,kBAAkB,yBAAyB,8BAA8B,sBAAsB,mBAAmB,8BAA8B,mBAAmB,qBAAqB;;AAEv5B;AACA;AACA,QAAQ,qDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAC;AAChB;AACA,oBAAoB,OAAO,qDAAU;AACrC;AACA;;AAE6D","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-canvas_2.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';\nimport { m as makeSwipeable } from './swipeable-71a0e453.js';\n\nconst canvasCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-canvas{display:block;position:relative}gx-canvas[hidden]{display:none !important}gx-canvas[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}\";\n\nconst Canvas = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.gxClick = createEvent(this, \"gxClick\", 7);\n        this.swipe = createEvent(this, \"swipe\", 7);\n        this.swipeUp = createEvent(this, \"swipeUp\", 7);\n        this.swipeRight = createEvent(this, \"swipeRight\", 7);\n        this.swipeDown = createEvent(this, \"swipeDown\", 7);\n        this.swipeLeft = createEvent(this, \"swipeLeft\", 7);\n        /**\n         * This attribute lets you specify how this element will behave when hidden.\n         *\n         * | Value        | Details                                                                     |\n         * | ------------ | --------------------------------------------------------------------------- |\n         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |\n         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |\n         */\n        this.invisibleMode = \"collapse\";\n        /**\n         * This attribute lets you specify if the element is disabled.\n         * If disabled, it will not fire any user interaction related event\n         * (for example, click event).\n         */\n        this.disabled = false;\n        this.width = null;\n        this.height = null;\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(event) {\n        if (this.disabled) {\n            return;\n        }\n        this.gxClick.emit(event);\n    }\n    componentDidLoad() {\n        makeSwipeable(this);\n        this.watchForItemsObserver = new MutationObserver(mutationsList => {\n            const shouldUpdateDimensions = mutationsList.some(mutation => mutation.type === \"attributes\" || mutation.type === \"childList\");\n            if (shouldUpdateDimensions) {\n                this.calculateDimensions();\n            }\n        });\n        this.watchForItemsObserver.observe(this.element, { childList: true });\n        this.calculateDimensions();\n    }\n    disconnectedCallback() {\n        if (this.watchForItemsObserver !== undefined) {\n            this.watchForItemsObserver.disconnect();\n            this.watchForItemsObserver = undefined;\n        }\n    }\n    calculateDimensions() {\n        const dimensions = Array.from(this.element.childNodes)\n            .filter(node => node instanceof HTMLElement)\n            .map((element) => [\n            element.clientWidth + element.offsetLeft,\n            element.clientHeight + element.offsetTop\n        ]);\n        this.width = Math.max(...dimensions.map(tuple => tuple[0]));\n        this.height = Math.max(...dimensions.map(tuple => tuple[1]));\n    }\n    render() {\n        this.element.addEventListener(\"click\", this.handleClick);\n        return (h(Host, { style: {\n                width: this.width !== null && this.width != 0\n                    ? `${this.width}px`\n                    : this.element.style.width,\n                height: this.height !== null && this.height != 0\n                    ? `${this.height}px`\n                    : this.element.style.height // Default height\n            } }, h(\"slot\", null)));\n    }\n    get element() { return getElement(this); }\n};\nCanvas.style = canvasCss;\n\nconst canvasCellCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-canvas-cell{position:absolute;display:-ms-flexbox;display:flex}gx-canvas-cell[hidden]{display:none !important}gx-canvas-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-canvas-cell[overflow-mode=clip]{overflow:hidden}gx-canvas-cell[overflow-mode=scroll]{overflow:auto}gx-canvas-cell:not([align])>*,gx-canvas-cell[align=left]>*{-ms-flex-pack:start;justify-content:flex-start}gx-canvas-cell[align=center]{-ms-flex-pack:center;justify-content:center}gx-canvas-cell[align=right]{-ms-flex-pack:end;justify-content:flex-end}gx-canvas-cell[valign=middle]{-ms-flex-align:center;align-items:center}gx-canvas-cell[valign=bottom]{-ms-flex-align:end;align-items:flex-end}\";\n\nconst CanvasCell = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Defines the horizontal aligmnent of the content of the cell.\n         */\n        this.align = \"left\";\n        /**\n         * Defines the vertical aligmnent of the content of the cell.\n         */\n        this.valign = \"top\";\n    }\n    render() {\n        return h(\"slot\", null);\n    }\n    get element() { return getElement(this); }\n};\nCanvasCell.style = canvasCellCss;\n\nexport { Canvas as gx_canvas, CanvasCell as gx_canvas_cell };\n"],"names":[],"sourceRoot":"webpack:///"}