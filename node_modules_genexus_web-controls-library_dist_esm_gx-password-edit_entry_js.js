"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-password-edit_entry_js"],{

/***/ 129:
/*!***************************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-password-edit.entry.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_password_edit": () => (/* binding */ PasswordEdit)
/* harmony export */ });
/* harmony import */ var C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 4475);
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-10623738.js */ 9689);



class PasswordEditRender {
  constructor(component) {
    this.component = component;
    this.handleChange = this.handleChange.bind(this);
    this.handleInput = this.handleInput.bind(this);
  }

  getNativeInputId() {
    return this.innerEdit.getNativeInputId();
  }

  getValueFromEvent(event) {
    return event.target && event.target.value;
  }

  handleChange(event) {
    this.component.value = this.getValueFromEvent(event);
    this.component.change.emit(event);
  }

  handleInput(event) {
    this.component.value = this.getValueFromEvent(event);
    this.component.input.emit(event);
  }
  /**
   * Update the native input element when the value changes
   */


  valueChanged() {
    const innerEdit = this.innerEdit;

    if (innerEdit && innerEdit.value !== this.component.value) {
      innerEdit.value = this.component.value;
    }
  }

  componentDidUnload() {
    this.innerEdit = null;
  }

  render() {
    const passwordEdit = this.component;
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("gx-edit", {
      ref: input => this.innerEdit = input,
      "css-class": passwordEdit.cssClass,
      disabled: passwordEdit.disabled,
      id: `gx-password-edit-${passwordEdit.element.id}`,
      placeholder: passwordEdit.placeholder,
      readonly: passwordEdit.readonly,
      "show-trigger": !passwordEdit.readonly && passwordEdit.showRevealButton,
      "trigger-class": passwordEdit.revealed ? "active" : "",
      "trigger-text": passwordEdit.revealed ? passwordEdit.revealButtonTextOff : passwordEdit.revealButtonTextOn,
      type: passwordEdit.revealed ? "text" : "password",
      value: passwordEdit.value,
      onChange: this.handleChange,
      onInput: this.handleInput
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("i", {
      class: "icon icon-eye" + (passwordEdit.revealed ? "-slash" : ""),
      slot: "trigger-content"
    }));
  }

}

const passwordEditCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-password-edit{display:block;-ms-flex:1;flex:1}gx-password-edit[hidden]{display:none !important}gx-password-edit[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-password-edit .icon{display:inline-block;height:1em;width:1em;margin-bottom:-3px;-webkit-filter:opacity(0.7);filter:opacity(0.7);background-repeat:no-repeat;background-size:contain}gx-password-edit button:hover .icon{-webkit-filter:invert(1);filter:invert(1)}gx-password-edit .icon-eye{background-image:url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\"/></svg>')}gx-password-edit .icon-eye-slash{background-image:url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\"/></svg>')}gx-password-edit gx-edit{height:100%}";
const PasswordEdit = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.change = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "change", 7);
    this.input = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "input", 7);
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */

    this.disabled = false;
    /**
     * Indicates if the value is revealed or masked.
     */

    this.revealed = false;
    this.renderer = new PasswordEditRender(this);
  }
  /**
   * Returns the id of the inner `input` element (if set).
   */


  getNativeInputId() {
    var _this = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.renderer.getNativeInputId();
    })();
  }

  valueChanged() {
    this.renderer.valueChanged();
  }

  handleTriggerClick() {
    this.revealed = !this.revealed;
  }

  render() {
    return this.renderer.render();
  }

  componentDidUnload() {
    this.renderer.componentDidUnload();
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "value": ["valueChanged"]
    };
  }

};
PasswordEdit.style = passwordEditCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-password-edit_entry_js.js.map