{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-grid-flex_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA,MAAMW,WAAW,GAAG,s4KAApB;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBb,IAAAA,qDAAgB,CAAC,IAAD,EAAOa,OAAP,CAAhB;AACA,SAAKC,0BAAL,GAAkCZ,qDAAW,CAAC,IAAD,EAAO,4BAAP,EAAqC,CAArC,CAA7C;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKa,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,aAAL,GAAqB,UAArB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,aAAL,GAAqB,KAArB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,OAAjB;AACH;AACD;AACJ;AACA;;;AACUC,EAAAA,QAAQ,GAAG;AAAA;;AAAA;AACb,WAAI,CAACC,OAAL,CACKC,aADL,CACmB,yDADnB,EAC8E,UAD9E;AADa;AAGhB;;AACDC,EAAAA,cAAc,GAAG;AACb,UAAMC,YAAY,GAAG,KAAKH,OAAL,CAAaI,KAAlC;AACAD,IAAAA,YAAY,CAACE,WAAb,CAAyB,8BAAzB,EAAyD,KAAKL,OAAL,CAAaM,aAAb,CAA2BC,WAA3B,GAAyC,IAAlG;AACAJ,IAAAA,YAAY,CAACE,WAAb,CAAyB,+BAAzB,EAA0D,KAAKL,OAAL,CAAaM,aAAb,CAA2BE,YAA3B,GAA0C,IAApG;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKP,cAAL;AACA,WAAQnB,qDAAC,CAACE,iDAAD,EAAOyB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,8DAAA,CAAwB,IAAxB,CAAlB,CAAP,EAAyD,CAC9DN,qDAAC,CAAC,MAAD,EAAS;AAAE8B,MAAAA,IAAI,EAAE;AAAR,KAAT,CAD6D,EAE9D9B,qDAAC,CAAC,MAAD,EAAS;AAAE8B,MAAAA,IAAI,EAAE;AAAR,KAAT,CAF6D,EAG9D9B,qDAAC,CAAC,KAAD,EAAQ;AAAE+B,MAAAA,KAAK,EAAE;AAAT,KAAR,EAA6C/B,qDAAC,CAAC,MAAD,EAAS;AAAE8B,MAAAA,IAAI,EAAE;AAAR,KAAT,CAA9C,CAH6D,CAAzD,CAAT;AAKH;;AACU,MAAPb,OAAO,GAAG;AAAE,WAAOb,qDAAU,CAAC,IAAD,CAAjB;AAA0B;;AA9DvB,CAAvB;AAgEAI,QAAQ,CAACa,KAAT,GAAiBd,WAAjB","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-grid-flex.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';\nimport './highlightable-e5a00dd1.js';\nimport { G as GridBaseHelper } from './grid-base-bc611296.js';\n\nconst gridFlexCss = \"@charset \\\"UTF-8\\\";.gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}.gx-grid-base{-ms-flex:1;flex:1}.gx-grid-base>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base>*>.scrollable-content{-ms-flex:1;flex:1}.gx-grid-base>.grid-empty-placeholder,.gx-grid-base>[slot=grid-empty-loading-placeholder]{display:none}.gx-grid-base>.grid-empty-placeholder[hidden],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base>.grid-empty-placeholder[hidden][invisible-mode=keep-space],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base>.grid-empty-placeholder>[slot=grid-content-empty]{-ms-flex:1;flex:1;-ms-flex-item-align:stretch;align-self:stretch}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child{display:none}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;height:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base.gx-grid-empty>*>.scrollable-content,.gx-grid-base.gx-grid-empty .gx-grid-paging{display:none}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden]{display:none !important}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading>:first-child{display:none}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder]{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-align:center}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-row{position:relative}gx-grid-flex{--gx-grid-flex-wrap:nowrap;--gx-grid-flex-justify-content:flex-start;--gx-grid-flex-align-items:stretch;--gx-grid-flex-align-content:normal;display:-ms-flexbox;display:flex}gx-grid-flex[hidden]{display:none !important}gx-grid-flex[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>div{-ms-flex:1;flex:1}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller),gx-grid-flex>*>.scrollable-content{display:-ms-flexbox;display:flex;-ms-flex-direction:var(--gx-grid-flex-direction);flex-direction:var(--gx-grid-flex-direction);-ms-flex-wrap:var(--gx-grid-flex-wrap);flex-wrap:var(--gx-grid-flex-wrap);-ms-flex-pack:var(--gx-grid-flex-justify-content);justify-content:var(--gx-grid-flex-justify-content);-ms-flex-align:var(--gx-grid-flex-align-items);align-items:var(--gx-grid-flex-align-items);-ms-flex-line-pack:var(--gx-grid-flex-align-content);align-content:var(--gx-grid-flex-align-content)}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden],gx-grid-flex>*>.scrollable-content[hidden]{display:none !important}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],gx-grid-flex>*>.scrollable-content[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size]{min-width:calc( var(--gx-grid-css-viewport-width) * var(--gx-grid-item-relative-size) )}gx-grid-flex gx-grid-smart-cell{display:-ms-flexbox;display:flex}gx-grid-flex gx-grid-smart-cell[hidden]{display:none !important}gx-grid-flex gx-grid-smart-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex gx-grid-smart-cell>*{-ms-flex:1;flex:1}\";\n\nconst GridFlex = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.gxInfiniteThresholdReached = createEvent(this, \"gxInfiniteThresholdReached\", 3);\n        /**\n         * This attribute defines if the control size will grow automatically,\n         * to adjust to its content size.\n         * If set to `false`, it won't grow automatically and it will show scrollbars\n         * if the content overflows.\n         */\n        this.autoGrow = false;\n        /**\n         * This attribute lets you specify how this element will behave when hidden.\n         *\n         * | Value        | Details                                                                     |\n         * | ------------ | --------------------------------------------------------------------------- |\n         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |\n         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |\n         */\n        this.invisibleMode = \"collapse\";\n        /**\n         * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.\n           Flexbox is (aside from optional wrapping) a single-direction layout concept.\n          Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n         *\n         * | Value        | Details                                                                                        |\n         * | ------------ | ---------------------------------------------------------------------------------------------- |\n         * | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                |\n         * | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |\n         */\n        this.flexDirection = \"row\";\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = \"150px\";\n    }\n    /*\n     * This method must be called after new grid data was fetched by the infinite scroller.\n     */\n    async complete() {\n        this.element\n            .querySelector(':scope > [slot=\"grid-content\"] gx-grid-infinite-scroll\"')[\"complete\"]();\n    }\n    ensureViewPort() {\n        const elementStyle = this.element.style;\n        elementStyle.setProperty(\"--gx-grid-css-viewport-width\", this.element.parentElement.offsetWidth + \"px\");\n        elementStyle.setProperty(\"--gx-grid-css-viewport-height\", this.element.parentElement.offsetHeight + \"px\");\n    }\n    render() {\n        this.ensureViewPort();\n        return (h(Host, Object.assign({}, GridBaseHelper.hostData(this)), [\n            h(\"slot\", { name: \"grid-content\" }),\n            h(\"slot\", { name: \"grid-empty-loading-placeholder\" }),\n            h(\"div\", { class: \"grid-empty-placeholder\" }, h(\"slot\", { name: \"grid-content-empty\" }))\n        ]));\n    }\n    get element() { return getElement(this); }\n};\nGridFlex.style = gridFlexCss;\n\nexport { GridFlex as gx_grid_flex };\n"],"names":["r","registerInstance","c","createEvent","h","H","Host","g","getElement","G","GridBaseHelper","gridFlexCss","GridFlex","constructor","hostRef","gxInfiniteThresholdReached","autoGrow","invisibleMode","flexDirection","threshold","complete","element","querySelector","ensureViewPort","elementStyle","style","setProperty","parentElement","offsetWidth","offsetHeight","render","Object","assign","hostData","name","class","gx_grid_flex"],"sourceRoot":"webpack:///"}