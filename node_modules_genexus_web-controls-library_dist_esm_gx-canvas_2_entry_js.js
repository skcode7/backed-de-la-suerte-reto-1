"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-canvas_2_entry_js"],{

/***/ 414:
/*!**********************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-canvas_2.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_canvas": () => (/* binding */ Canvas),
/* harmony export */   "gx_canvas_cell": () => (/* binding */ CanvasCell)
/* harmony export */ });
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-10623738.js */ 9689);
/* harmony import */ var _swipeable_71a0e453_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swipeable-71a0e453.js */ 1772);



const canvasCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-canvas{display:block;position:relative}gx-canvas[hidden]{display:none !important}gx-canvas[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}";

const Canvas = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.gxClick = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "gxClick", 7);
        this.swipe = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swipe", 7);
        this.swipeUp = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swipeUp", 7);
        this.swipeRight = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swipeRight", 7);
        this.swipeDown = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swipeDown", 7);
        this.swipeLeft = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swipeLeft", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.width = null;
        this.height = null;
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick(event) {
        if (this.disabled) {
            return;
        }
        this.gxClick.emit(event);
    }
    componentDidLoad() {
        (0,_swipeable_71a0e453_js__WEBPACK_IMPORTED_MODULE_1__.m)(this);
        this.watchForItemsObserver = new MutationObserver(mutationsList => {
            const shouldUpdateDimensions = mutationsList.some(mutation => mutation.type === "attributes" || mutation.type === "childList");
            if (shouldUpdateDimensions) {
                this.calculateDimensions();
            }
        });
        this.watchForItemsObserver.observe(this.element, { childList: true });
        this.calculateDimensions();
    }
    disconnectedCallback() {
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    }
    calculateDimensions() {
        const dimensions = Array.from(this.element.childNodes)
            .filter(node => node instanceof HTMLElement)
            .map((element) => [
            element.clientWidth + element.offsetLeft,
            element.clientHeight + element.offsetTop
        ]);
        this.width = Math.max(...dimensions.map(tuple => tuple[0]));
        this.height = Math.max(...dimensions.map(tuple => tuple[1]));
    }
    render() {
        this.element.addEventListener("click", this.handleClick);
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: {
                width: this.width !== null && this.width != 0
                    ? `${this.width}px`
                    : this.element.style.width,
                height: this.height !== null && this.height != 0
                    ? `${this.height}px`
                    : this.element.style.height // Default height
            } }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
Canvas.style = canvasCss;

const canvasCellCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-canvas-cell{position:absolute;display:-ms-flexbox;display:flex}gx-canvas-cell[hidden]{display:none !important}gx-canvas-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-canvas-cell[overflow-mode=clip]{overflow:hidden}gx-canvas-cell[overflow-mode=scroll]{overflow:auto}gx-canvas-cell:not([align])>*,gx-canvas-cell[align=left]>*{-ms-flex-pack:start;justify-content:flex-start}gx-canvas-cell[align=center]{-ms-flex-pack:center;justify-content:center}gx-canvas-cell[align=right]{-ms-flex-pack:end;justify-content:flex-end}gx-canvas-cell[valign=middle]{-ms-flex-align:center;align-items:center}gx-canvas-cell[valign=bottom]{-ms-flex-align:end;align-items:flex-end}";

const CanvasCell = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        /**
         * Defines the horizontal aligmnent of the content of the cell.
         */
        this.align = "left";
        /**
         * Defines the vertical aligmnent of the content of the cell.
         */
        this.valign = "top";
    }
    render() {
        return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null);
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
CanvasCell.style = canvasCellCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-canvas_2_entry_js.js.map