"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-grid-flex_entry_js"],{

/***/ 9300:
/*!***********************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-grid-flex.entry.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_grid_flex": () => (/* binding */ GridFlex)
/* harmony export */ });
/* harmony import */ var C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 4475);
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-10623738.js */ 9689);
/* harmony import */ var _highlightable_e5a00dd1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./highlightable-e5a00dd1.js */ 6847);
/* harmony import */ var _grid_base_bc611296_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./grid-base-bc611296.js */ 1989);




const gridFlexCss = "@charset \"UTF-8\";.gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}.gx-grid-base{-ms-flex:1;flex:1}.gx-grid-base>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base>*>.scrollable-content{-ms-flex:1;flex:1}.gx-grid-base>.grid-empty-placeholder,.gx-grid-base>[slot=grid-empty-loading-placeholder]{display:none}.gx-grid-base>.grid-empty-placeholder[hidden],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base>.grid-empty-placeholder[hidden][invisible-mode=keep-space],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base>.grid-empty-placeholder>[slot=grid-content-empty]{-ms-flex:1;flex:1;-ms-flex-item-align:stretch;align-self:stretch}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child{display:none}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;height:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base.gx-grid-empty>*>.scrollable-content,.gx-grid-base.gx-grid-empty .gx-grid-paging{display:none}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden]{display:none !important}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading>:first-child{display:none}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder]{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-align:center}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-row{position:relative}gx-grid-flex{--gx-grid-flex-wrap:nowrap;--gx-grid-flex-justify-content:flex-start;--gx-grid-flex-align-items:stretch;--gx-grid-flex-align-content:normal;display:-ms-flexbox;display:flex}gx-grid-flex[hidden]{display:none !important}gx-grid-flex[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>div{-ms-flex:1;flex:1}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller),gx-grid-flex>*>.scrollable-content{display:-ms-flexbox;display:flex;-ms-flex-direction:var(--gx-grid-flex-direction);flex-direction:var(--gx-grid-flex-direction);-ms-flex-wrap:var(--gx-grid-flex-wrap);flex-wrap:var(--gx-grid-flex-wrap);-ms-flex-pack:var(--gx-grid-flex-justify-content);justify-content:var(--gx-grid-flex-justify-content);-ms-flex-align:var(--gx-grid-flex-align-items);align-items:var(--gx-grid-flex-align-items);-ms-flex-line-pack:var(--gx-grid-flex-align-content);align-content:var(--gx-grid-flex-align-content)}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden],gx-grid-flex>*>.scrollable-content[hidden]{display:none !important}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],gx-grid-flex>*>.scrollable-content[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size]{min-width:calc( var(--gx-grid-css-viewport-width) * var(--gx-grid-item-relative-size) )}gx-grid-flex gx-grid-smart-cell{display:-ms-flexbox;display:flex}gx-grid-flex gx-grid-smart-cell[hidden]{display:none !important}gx-grid-flex gx-grid-smart-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex gx-grid-smart-cell>*{-ms-flex:1;flex:1}";
const GridFlex = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.gxInfiniteThresholdReached = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "gxInfiniteThresholdReached", 3);
    /**
     * This attribute defines if the control size will grow automatically,
     * to adjust to its content size.
     * If set to `false`, it won't grow automatically and it will show scrollbars
     * if the content overflows.
     */

    this.autoGrow = false;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    /**
     * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
       Flexbox is (aside from optional wrapping) a single-direction layout concept.
      Think of flex items as primarily laying out either in horizontal rows or vertical columns.
     *
     * | Value        | Details                                                                                        |
     * | ------------ | ---------------------------------------------------------------------------------------------- |
     * | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                |
     * | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |
     */

    this.flexDirection = "row";
    /**
     * The threshold distance from the bottom
     * of the content to call the `infinite` output event when scrolled.
     * The threshold value can be either a percent, or
     * in pixels. For example, use the value of `10%` for the `infinite`
     * output event to get called when the user has scrolled 10%
     * from the bottom of the page. Use the value `100px` when the
     * scroll is within 100 pixels from the bottom of the page.
     */

    this.threshold = "150px";
  }
  /*
   * This method must be called after new grid data was fetched by the infinite scroller.
   */


  complete() {
    var _this = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.element.querySelector(':scope > [slot="grid-content"] gx-grid-infinite-scroll"')["complete"]();
    })();
  }

  ensureViewPort() {
    const elementStyle = this.element.style;
    elementStyle.setProperty("--gx-grid-css-viewport-width", this.element.parentElement.offsetWidth + "px");
    elementStyle.setProperty("--gx-grid-css-viewport-height", this.element.parentElement.offsetHeight + "px");
  }

  render() {
    this.ensureViewPort();
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.H, Object.assign({}, _grid_base_bc611296_js__WEBPACK_IMPORTED_MODULE_3__.G.hostData(this)), [(0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "grid-content"
    }), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "grid-empty-loading-placeholder"
    }), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "grid-empty-placeholder"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "grid-content-empty"
    }))]);
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
GridFlex.style = gridFlexCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-grid-flex_entry_js.js.map