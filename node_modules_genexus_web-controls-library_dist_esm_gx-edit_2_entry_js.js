"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-edit_2_entry_js"],{

/***/ 36:
/*!********************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-edit_2.entry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_edit": () => (/* binding */ Edit),
/* harmony export */   "gx_form_field": () => (/* binding */ FormField)
/* harmony export */ });
/* harmony import */ var C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 4475);
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-10623738.js */ 9689);
/* harmony import */ var _highlightable_e5a00dd1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./highlightable-e5a00dd1.js */ 6847);
/* harmony import */ var _css_variables_watcher_cf910941_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./css-variables-watcher-cf910941.js */ 9438);
/* harmony import */ var _line_clamp_b4163b3c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./line-clamp-b4163b3c.js */ 481);





let autoEditId = 0;
const fontCategoryTagMap = {
  body: "p",
  caption1: "span",
  caption2: "span",
  footnote: "footer",
  headline: "h1",
  subheadline: "h2"
};

class EditRender {
  constructor(component, handlers) {
    this.component = component;
    this.handleChange = handlers.handleChange;
    this.handleTriggerClick = handlers.handleTriggerClick;
    this.handleValueChanging = handlers.handleValueChanging;
  }

  getNativeInputId() {
    return this.getNativeInput().id;
  }

  getNativeInput() {
    return this.component.element.querySelector("[data-native-element]");
  }

  getCssClasses() {
    const edit = this.component;
    const classList = [];

    if (edit.type === "file") {
      classList.push("input-control-file");
    } else {
      classList.push("input-control");
    }

    return classList.join(" ");
  }

  getValueFromEvent(event) {
    return event.target && event.target.value;
  }

  stopPropagation(event) {
    event.stopPropagation();
  }

  getReadonlyContent(component, initialContent) {
    let content = initialContent;

    if (content && (component.type === "datetime-local" || component.type === "date")) {
      const dateTime = new Date(component.value);

      if (component.type === "date") {
        dateTime.setDate(dateTime.getDate() + 1);
      }

      const dayMonthYear = new Intl.DateTimeFormat("default", {
        year: "numeric",
        month: "numeric",
        day: "numeric"
      }).format(dateTime);

      if (component.type === "date") {
        content = `${dayMonthYear}`;
      } else {
        const hourMins = new Intl.DateTimeFormat("default", {
          hour: "numeric",
          minute: "numeric"
        }).format(dateTime);
        content = `${dayMonthYear} ${hourMins}`;
      }
    }

    return content;
  }
  /**
   * Update the native input element when the value changes
   */


  valueChanged() {
    const inputEl = this.getNativeInput();

    if (inputEl && inputEl.value !== this.component.value) {
      inputEl.value = this.component.value;
    }
  }

  render(slots) {
    const edit = this.component;
    const dateTypes = ["datetime-local", "date", "time"];
    const valueChangingHandler = this.handleValueChanging;

    if (!this.inputId) {
      this.inputId = edit.element.id ? `${edit.element.id}__edit` : `gx-edit-auto-id-${autoEditId++}`;
    }

    const attris = {
      "aria-disabled": edit.disabled ? "true" : undefined,
      autocapitalize: edit.autocapitalize,
      autocomplete: edit.autocomplete,
      autocorrect: edit.autocorrect,
      class: this.getCssClasses(),
      "data-native-element": "",
      disabled: edit.disabled,
      id: this.inputId,
      // We limit the year to 4 digits
      max: edit.type === "datetime-local" ? "9999-12-31T23:59:59" : edit.type === "date" ? "9999-12-31" : undefined,
      // We extend the minimum value of the date
      min: edit.type === "datetime-local" ? "0001-01-01T00:00:00" : edit.type === "date" ? "0001-01-01" : undefined,
      onChange: this.handleChange,
      onClick: edit.disabled ? null : this.stopPropagation,
      onInput: valueChangingHandler,
      placeholder: edit.placeholder,
      step: dateTypes.includes(edit.type) ? "1" : undefined
    }; // This will be displayed at the end

    let editableElement; // If the format is the default format

    if (edit.format === "Text") {
      // If it has multiline, it sets a textarea
      if (edit.multiline) {
        editableElement = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: {
            container: true,
            disabled: edit.disabled
          },
          "data-part": "container",
          hidden: edit.readonly
        }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("textarea", Object.assign({}, attris, {
          "data-part": "field"
        }), edit.value)); // Otherwise, it sets an input
      } else {
        const input = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", Object.assign({}, attris, {
          type: edit.type,
          value: edit.value,
          "data-part": "field"
        }));
        const existSlotContent = edit.element.querySelector("[slot='trigger-content']"); // If showTrigger == true, it also sets a trigger button

        editableElement = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: {
            container: true,
            disabled: edit.disabled,

            /*  Used when the gx-edit has
                  type="datetime-local" | "date" | "time"
                and its value is null
            */
            "null-date": dateTypes.includes(edit.type) && (edit.value == undefined || edit.value == "")
          },
          "data-part": "container",
          hidden: edit.readonly
        }, input, dateTypes.includes(edit.type) && (edit.value == undefined || edit.value == "") && (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: "date-placeholder-container",
          "data-readonly": true
        }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", null, edit.placeholder)), edit.showTrigger && (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: "trigger-button-container"
        }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
          class: "trigger-button",
          onClick: this.handleTriggerClick,
          type: "button",
          disabled: edit.disabled
        }, existSlotContent !== null && slots.triggerContent)));
      } // If format = HTML

    } else {
      editableElement = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: {
          container: true,
          "HTML-content": true,
          disabled: edit.disabled && !edit.readonly
        },
        "data-part": "container"
      }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "html-container"
      }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        "data-native-element": true,
        innerHTML: edit.inner
      })));
    } // It can be h1, h2, p, footer and span value


    const ReadonlyTag = this.getReadonlyTagByFontCategory();
    return [edit.readonly && edit.format == "Text" && (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "data-readonly": ""
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "readonly-content-container"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)(ReadonlyTag, {
      key: "readonly",
      class: {
        "readonly-content": true,
        "gx-line-clamp": this.component.lineClamp,
        relative: !this.component.lineClamp
      },
      style: this.component.lineClamp && {
        "--max-lines": edit.maxLines.toString()
      }
    }, edit.lineClamp && (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "line-measuring",
      "aria-hidden": true
    }, "A"), this.getReadonlyContent(edit, edit.value)))), editableElement];
  }

  getReadonlyTagByFontCategory() {
    const tag = fontCategoryTagMap[this.component.fontCategory];

    if (!tag) {
      return "span";
    }

    return tag;
  }

}

const editCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-table-cell[min-height][max-height] gx-edit .container[data-part=container] .html-container [data-native-element]{position:absolute}gx-edit{overflow:hidden}gx-edit:not([show-trigger]) [slot=trigger-content],gx-edit[show-trigger=false] [slot=trigger-content]{display:none}gx-edit[disabled]:not([disabled=false]){pointer-events:none}gx-edit .container[data-part=container]{margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;overflow:hidden;-webkit-transition:background-color 0.25s, color 0.25s, border-color 0.25s, opacity 0.25s;transition:background-color 0.25s, color 0.25s, border-color 0.25s, opacity 0.25s;}gx-edit .container[data-part=container]:not(.HTML-content){padding:0}gx-edit .container[data-part=container].disabled{opacity:50%}gx-edit .container[data-part=container].null-date:not(:focus-within) input[data-native-element]{opacity:0}gx-edit .container[data-part=container].null-date:focus-within .date-placeholder-container{opacity:0}gx-edit .container[data-part=container] textarea,gx-edit .container[data-part=container] input[data-native-element]{border:none;border-radius:0;outline:0;-ms-flex:1;flex:1;width:100%;background-color:unset;-webkit-transition:inherit;transition:inherit}gx-edit .container[data-part=container] textarea::-webkit-input-placeholder,gx-edit .container[data-part=container] input[data-native-element]::-webkit-input-placeholder{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] textarea::-moz-placeholder,gx-edit .container[data-part=container] input[data-native-element]::-moz-placeholder{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] textarea:-ms-input-placeholder,gx-edit .container[data-part=container] input[data-native-element]:-ms-input-placeholder{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] textarea::-ms-input-placeholder,gx-edit .container[data-part=container] input[data-native-element]::-ms-input-placeholder{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] textarea::placeholder,gx-edit .container[data-part=container] input[data-native-element]::placeholder{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] .date-placeholder-container[data-readonly]{border:none;border-radius:0;outline:0;position:absolute;-ms-flex:1;flex:1;background-color:unset;pointer-events:none;-webkit-transition:inherit;transition:inherit}gx-edit .container[data-part=container] .date-placeholder-container[data-readonly] span{color:var(--placeholder-text-color, #757575c0);opacity:1}gx-edit .container[data-part=container] .html-container{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;position:relative;height:100%;overflow:hidden}gx-edit .container[data-part=container] .html-container [data-native-element]{position:relative;width:100%;text-align:start}gx-edit .container[data-part=container] .trigger-button-container{min-width:2.5rem;max-width:25%;height:100%;overflow:hidden}gx-edit .container[data-part=container] .trigger-button-container .trigger-button{border:none;border-radius:0;outline:0;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;-ms-flex:1;flex:1;width:100%;height:100%;opacity:0.8;background-color:#ddd;color:var(--action-tint-color, black);-webkit-transition:-webkit-filter 0.25s;transition:-webkit-filter 0.25s;transition:filter 0.25s;transition:filter 0.25s, -webkit-filter 0.25s}gx-edit .container[data-part=container] .trigger-button-container .trigger-button:hover{-webkit-filter:brightness(90%);filter:brightness(90%)}gx-edit .container[data-part=container] .trigger-button-container .trigger-button:active{-webkit-filter:brightness(80%);filter:brightness(80%)}gx-edit .container[data-part=container] .trigger-button-container .trigger-button>[slot=trigger-content]{pointer-events:none;height:1.34em}gx-edit>[data-readonly]{margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;position:relative;white-space:break-spaces;overflow:hidden;-webkit-transition:background-color 0.25s, color 0.25s, border-color 0.25s, opacity 0.25s;transition:background-color 0.25s, color 0.25s, border-color 0.25s, opacity 0.25s}gx-edit>[data-readonly] .readonly-content-container{display:-ms-flexbox;display:flex;-ms-flex-align:inherit;align-items:inherit;-ms-flex:1;flex:1;position:relative;height:100%}gx-edit>[data-readonly] .readonly-content-container .readonly-content{position:absolute;width:100%;margin:0}gx-edit>[data-readonly] .readonly-content-container .readonly-content.relative{position:relative}gx-edit h1,gx-edit h2,gx-edit footer{font-size:inherit;font-weight:inherit}gx-edit{display:-ms-flexbox;display:flex;-ms-flex-align:stretch;align-items:stretch;-ms-flex:1;flex:1}gx-edit[hidden]{display:none !important}gx-edit[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-edit[multiline][readonly=false]{display:block}gx-edit[multiline][readonly=false][hidden]{display:none !important}gx-edit[multiline][readonly=false][hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-edit.gx-edit--single-line [data-readonly]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}";
const Edit = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.change = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "change", 7);
    this.input = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "input", 7);
    this.gxTriggerClick = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "gxTriggerClick", 7);
    /**
     * Used to define the semantic of the element when readonly=true.
     *
     * Font categories are mapped to semantic HTML elements when rendered:
     *
     * * `"headline"`: `h1`
     * * `"subheadline"`: `h2`
     * * `"body"`: `p`
     * * `"footnote"`: `footer`
     * * `"caption1"`: `span`
     * * `"caption2"`: `span`
     */

    this.fontCategory = "body";
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */

    this.disabled = false;
    /**
     * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
     */

    this.lineClamp = false;
    /**
     * The type of control to render. A subset of the types supported by the `input` element is supported:
     *
     * * `"date"`
     * * `"datetime-local"`
     * * `"email"`
     * * `"file"`
     * * `"number"`
     * * `"password"`
     * * `"search"`
     * * `"tel"`
     * * `"text"`
     * * `"url"`
     */

    this.type = "text";
    /**
     * True to highlight control when an action is fired.
     */

    this.highlightable = false;
    /**
     * It specifies the format that will have the edit control.
     *
     * If `format` = `HTML`, the edit control works as an HTML div and the
     * innerHTML will be the same as the `inner` property specifies. Also, it
     * does not allow any input/editable UI since it works as an HTML div.
     *
     * If `format` = `Text`, the edit control works as a normal input control and
     * it is affected by most of the defined properties.
     */

    this.format = "Text";
    /**
     * Used as the innerHTML when `format` = `HTML`.
     */

    this.inner = "";
    this.maxLines = 0;
    this.renderer = new EditRender(this, {
      handleChange: this.handleChange.bind(this),
      handleTriggerClick: this.handleTriggerClick.bind(this),
      handleValueChanging: this.handleValueChanging.bind(this)
    });
    (0,_css_variables_watcher_cf910941_js__WEBPACK_IMPORTED_MODULE_3__.c)(this, [{
      cssVariableName: "--font-category",
      propertyName: "fontCategory"
    }]);
    (0,_line_clamp_b4163b3c_js__WEBPACK_IMPORTED_MODULE_4__.m)(this, ".readonly-content-container", ".line-measuring");
  }
  /**
   * Returns the id of the inner `input` element (if set).
   */


  getNativeInputId() {
    var _this = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.renderer.getNativeInputId();
    })();
  }

  componentDidLoad() {
    this.toggleValueSetClass();

    if (this.readonly || this.format == "HTML") {
      (0,_highlightable_e5a00dd1_js__WEBPACK_IMPORTED_MODULE_2__.m)(this);
    }
  }

  valueChanged() {
    this.renderer.valueChanged();
    this.toggleValueSetClass();
  }

  toggleValueSetClass() {
    if (this.value === "") {
      this.element.classList.remove("value-set");
    } else {
      this.element.classList.add("value-set");
    }
  }

  handleChange(event) {
    this.value = this.renderer.getValueFromEvent(event);
    this.change.emit(event);
  }

  handleValueChanging(event) {
    this.value = this.renderer.getValueFromEvent(event);
    this.input.emit(event);
  }

  handleTriggerClick(event) {
    if (!this.disabled) {
      event.stopPropagation();
    }

    this.gxTriggerClick.emit(event);
  }

  render() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        "gx-edit--single-line": this.type === "date" || this.type === "datetime-local"
      },
      disabled: this.disabled
    }, this.renderer.render({
      triggerContent: (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
        name: "trigger-content"
      })
    }));
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "value": ["valueChanged"]
    };
  }

};
Edit.style = editCss;
let autoFormFieldId = 0;

class FormFieldRender {
  constructor(component) {
    this.component = component;
    this.LABEL_WIDTH_BY_POSITION = {
      bottom: "label-bottom",
      float: "",
      left: "label-left",
      none: "sr-only",
      right: "label-right",
      top: "label-top"
    };
    this.INNER_CONTROL_WIDTH_BY_LABEL_POSITION = {
      bottom: "field-label-bottom",
      float: "",
      left: "field-label-left",
      none: "field-label-top",
      right: "field-label-right",
      top: "field-label-top"
    };
  }

  getInnerControlContainerClass() {
    const className = this.INNER_CONTROL_WIDTH_BY_LABEL_POSITION[this.component.labelPosition];
    return {
      [className]: true,
      "d-flex": true
    };
  }

  shouldRenderLabelBefore() {
    const formField = this.component;
    return !formField.labelPosition || formField.labelPosition === "top" || formField.labelPosition === "right" || formField.labelPosition === "bottom" || formField.labelPosition === "left" || formField.labelPosition === "none";
  }

  componentDidLoad() {
    var _this2 = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const formField = _this2.component;
      const innerControl = formField.element.querySelector("[area='field']");

      if (innerControl && innerControl.getNativeInputId) {
        const nativeInputId = yield innerControl.getNativeInputId();

        if (nativeInputId) {
          const nativeInput = formField.element.querySelector(`#${nativeInputId}`);

          if (nativeInput !== null) {
            nativeInput.setAttribute("data-part", "field");
          }

          const innerLabel = formField.element.querySelector("label");

          if (nativeInputId && innerLabel) {
            innerLabel.setAttribute("for", nativeInputId);
          }
        }
      }
    })();
  }

  renderForRadio(renderLabel, renderLabelBefore, slot) {
    const labelId = `${this.formFieldId}-label`;
    const labelPosition = this.component.labelPosition;
    const label = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: this.LABEL_WIDTH_BY_POSITION[labelPosition],
      id: labelId,
      "data-part": "label"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "label-content"
    }, this.component.labelCaption));
    const labelPositionClassName = `label-position-${labelPosition}`;
    const isValidLabelPosition = labelPosition === "top" || labelPosition === "right" || labelPosition === "bottom" || labelPosition === "left";
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "form-group mb-0",
      "aria-labelledby": labelId,
      role: "group"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: {
        "radio-group": true,
        "no-gutters": true,
        [labelPositionClassName]: isValidLabelPosition
      }
    }, renderLabel && renderLabelBefore ? label : null, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: this.getInnerControlContainerClass()
    }, slot), renderLabel && !renderLabelBefore ? label : null));
  }

  render(slots) {
    const formField = this.component;
    const labelPosition = formField.labelPosition;
    const isRadioGroup = formField.element.querySelector("gx-radio-group[area='field']") !== null;
    const renderLabelBefore = this.shouldRenderLabelBefore();
    const renderLabel = labelPosition !== "none";

    if (!this.formFieldId) {
      this.formFieldId = formField.element.id || `gx-form-field-auto-id-${autoFormFieldId++}`;
    }

    if (isRadioGroup) {
      return this.renderForRadio(renderLabel, renderLabelBefore, slots.default);
    } else {
      const label = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", {
        class: this.LABEL_WIDTH_BY_POSITION[labelPosition],
        "data-part": "label"
      }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "label-content"
      }, formField.labelCaption));
      const result = labelPosition === "float" ? (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, slots.default, label) : (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: {
          "form-group": true,
          "no-gutters": true,
          "mb-0": true,
          "flex-column": labelPosition === "top",
          "flex-column-reverse": labelPosition === "bottom",
          "flex-row-reverse": labelPosition === "right",
          "flex-row": labelPosition === "left"
        }
      }, renderLabel && renderLabelBefore ? label : null, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: this.getInnerControlContainerClass()
      }, slots.default), renderLabel && !renderLabelBefore ? label : null);
      return [(0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("gx-bootstrap", null), result];
    }
  }

}

const formFieldCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-form-field{--elevation:0}gx-form-field [data-part=field]{-webkit-box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075));box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075))}gx-form-field[label-position=float]>div{position:relative;margin-bottom:1em;--input-padding-y:0.4em;--input-padding-x:0.7rem}gx-form-field[label-position=float]>div input,gx-form-field[label-position=float]>div>label{padding:var(--input-padding-y) var(--input-padding-x)}gx-form-field[label-position=float]>div>label{position:absolute;top:0;left:0;display:block;width:100%;margin-bottom:0;line-height:1.5;color:#495057;border:1px solid transparent;border-radius:0.25em;-webkit-transition:all 0.1s ease-in-out;transition:all 0.1s ease-in-out}gx-form-field[label-position=float]>div input::-webkit-input-placeholder{color:transparent}gx-form-field[label-position=float]>div input:-ms-input-placeholder{color:transparent}gx-form-field[label-position=float]>div input::-ms-input-placeholder{color:transparent}gx-form-field[label-position=float]>div input::-moz-placeholder{color:transparent}gx-form-field[label-position=float]>div input::placeholder{color:transparent}gx-form-field[label-position=float]>div [area=field].value-set input{padding-top:calc( var(--input-padding-y) + var(--input-padding-y) * (2 / 3) );padding-bottom:calc(var(--input-padding-y) / 3)}gx-form-field[label-position=float]>div [area=field].value-set~label{padding-top:calc(var(--input-padding-y) / 3);padding-bottom:calc(var(--input-padding-y) / 3);font-size:12px;color:#777}gx-form-field .label-position-top{-ms-flex-direction:column;flex-direction:column}gx-form-field .label-position-right{-ms-flex-direction:row-reverse;flex-direction:row-reverse}gx-form-field .label-position-bottom{-ms-flex-direction:column-reverse;flex-direction:column-reverse}gx-form-field .label-position-left{-ms-flex-direction:row;flex-direction:row}gx-form-field .label-left,gx-form-field .label-right{position:relative;width:100%;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}gx-form-field .label-left,gx-form-field .label-top,gx-form-field .label-bottom{text-align:start}gx-form-field .label-right{text-align:end}gx-form-field .label-top,gx-form-field .label-bottom,gx-form-field .field-label-top,gx-form-field .field-label-bottom{position:relative;width:100%;max-width:100%}gx-form-field .label-top,gx-form-field .label-bottom{-ms-flex:0;flex:0}gx-form-field .field-label-top,gx-form-field .field-label-bottom{-ms-flex:1;flex:1}gx-form-field .field-label-left,gx-form-field .field-label-right{position:relative;width:100%;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}gx-form-field .label-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}gx-form-field>.form-group{max-height:100%;display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-wrap:nowrap;flex-wrap:nowrap}gx-form-field>.form-group>div{-ms-flex:1;flex:1;max-height:100%}gx-form-field .radio-group{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-wrap:wrap;flex-wrap:wrap}gx-form-field{--margin-top:initial;--margin-right:initial;--margin-bottom:initial;--margin-left:initial;--width:initial;--height:initial;display:-ms-flexbox;display:flex;justify-self:stretch;-ms-flex-item-align:stretch;align-self:stretch;-ms-flex:1;flex:1}gx-form-field[hidden]{display:none !important}gx-form-field[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}[align=left]>gx-form-field [data-part=field],[align=left]>gx-form-field [data-readonly]{text-align:start}[align=left]>gx-form-field gx-radio-group[direction=vertical] [data-part=option-control],[align=left]>gx-form-field gx-radio-group[direction=horizontal],[align=left]>gx-form-field gx-checkbox [data-part=option-control],[align=left]>gx-form-field gx-gauge{-ms-flex-pack:start;justify-content:flex-start}[align=center]>gx-form-field [data-part=field],[align=center]>gx-form-field [data-readonly]{text-align:center}[align=center]>gx-form-field gx-radio-group[direction=vertical] [data-part=option-control],[align=center]>gx-form-field gx-radio-group[direction=horizontal],[align=center]>gx-form-field gx-checkbox [data-part=option-control],[align=center]>gx-form-field gx-gauge{-ms-flex-pack:center;justify-content:center}[align=right]>gx-form-field [data-part=field],[align=right]>gx-form-field [data-readonly]{text-align:end}[align=right]>gx-form-field gx-radio-group[direction=vertical] [data-part=option-control],[align=right]>gx-form-field gx-radio-group[direction=horizontal],[align=right]>gx-form-field gx-checkbox [data-part=option-control],[align=right]>gx-form-field gx-gauge{-ms-flex-pack:end;justify-content:flex-end}[valign=top]>gx-form-field{}[valign=top]>gx-form-field [data-readonly]:not([direction]),[valign=top]>gx-form-field [data-part=container]{-ms-flex-align:start;align-items:flex-start}[valign=top]>gx-form-field gx-radio-group[direction=vertical]{-ms-flex-pack:start;justify-content:flex-start}[valign=top]>gx-form-field gx-radio-group[direction=horizontal]{-ms-flex-line-pack:start;align-content:flex-start}[valign=top]>gx-form-field gx-gauge{-ms-flex-align:start;align-items:flex-start}[valign=middle]>gx-form-field [data-part=label]{-ms-flex-item-align:center;align-self:center}[valign=middle]>gx-form-field [data-readonly]:not([direction]),[valign=middle]>gx-form-field [data-part=container]{-ms-flex-align:center;align-items:center}[valign=middle]>gx-form-field gx-radio-group[direction=vertical]{-ms-flex-pack:center;justify-content:center}[valign=middle]>gx-form-field gx-radio-group[direction=horizontal]{-ms-flex-line-pack:center;align-content:center}[valign=middle]>gx-form-field gx-gauge{-ms-flex-align:center;align-items:center}[valign=bottom]>gx-form-field [data-part=label]{-ms-flex-item-align:end;align-self:flex-end}[valign=bottom]>gx-form-field [data-readonly]:not([direction]),[valign=bottom]>gx-form-field [data-part=container]{-ms-flex-align:end;align-items:flex-end}[valign=bottom]>gx-form-field gx-radio-group[direction=vertical]{-ms-flex-pack:end;justify-content:flex-end}[valign=bottom]>gx-form-field gx-radio-group[direction=horizontal]{-ms-flex-line-pack:end;align-content:flex-end}[valign=bottom]>gx-form-field gx-gauge{-ms-flex-align:end;align-items:flex-end}";
const FormField = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    this.renderer = new FormFieldRender(this);
  }

  componentDidLoad() {
    this.renderer.componentDidLoad();
  }

  render() {
    return this.renderer.render({
      default: (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)
    });
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
FormField.style = formFieldCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-edit_2_entry_js.js.map