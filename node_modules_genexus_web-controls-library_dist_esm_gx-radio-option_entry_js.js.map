{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-radio-option_entry_js.js","mappings":";;;;;;;;;;;;;;AAA6G;;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAC,UAAU,yGAAyG;AACpI,YAAY,qDAAC,UAAU,2BAA2B;AAClD,gBAAgB,qDAAC,0BAA0B,YAAY,6CAA6C;AACpG,gBAAgB,qDAAC,YAAY,wBAAwB;AACrD,gBAAgB,qDAAC,UAAU,wBAAwB;AACnD,oBAAoB,qDAAC,aAAa,QAAQ;AAC1C,YAAY,qDAAC,0BAA0B,uBAAuB;AAC9D;AACA;;AAEA,uCAAuC,oBAAoB,4BAA4B,oCAAoC,gBAAgB,gBAAgB,kBAAkB,kBAAkB,gBAAgB,cAAc,+BAA+B,kCAAkC,4BAA4B,0CAA0C,wBAAwB,wBAAwB,mDAAmD,yBAAyB,kBAAkB,2BAA2B,oBAAoB,aAAa,sBAAsB,mBAAmB,oBAAoB,2BAA2B,WAAW,OAAO,gBAAgB,4DAA4D,UAAU,uBAAuB,aAAa,6CAA6C,oBAAoB,aAAa,wCAAwC,4DAA4D,WAAW,YAAY,UAAU,mFAAmF,yCAAyC,6CAA6C,wEAAwE,YAAY,+GAA+G,kDAAkD,sDAAsD,iGAAiG,+BAA+B,uBAAuB,iFAAiF,sEAAsE,8DAA8D,oFAAoF,2BAA2B,4DAA4D,kBAAkB,WAAW,YAAY,oBAAoB,4BAA4B,0CAA0C,aAAa,qCAAqC,6BAA6B,iDAAiD,kBAAkB,WAAW,YAAY,oBAAoB,UAAU,UAAU,WAAW,kBAAkB,qCAAqC,6BAA6B,yCAAyC,SAAS,qCAAqC,6BAA6B;;AAEv/E;AACA;AACA,QAAQ,qDAAgB;AACxB,sBAAsB,qDAAW;AACjC,wBAAwB,qDAAW;AACnC,8BAA8B,qDAAW;AACzC,gCAAgC,qDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA,eAAe,qDAAC,CAAC,iDAAI;AACrB;AACA,oBAAoB,OAAO,qDAAU;AACrC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAE0C","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-radio-option.entry.js"],"sourcesContent":["import { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-10623738.js';\n\nlet autoRadioId = 0;\nclass RadioOptionRender {\n    constructor(component) {\n        this.component = component;\n    }\n    getNativeInputId() {\n        return this.getNativeInput().id;\n    }\n    getNativeInput() {\n        return this.component.element.querySelector(\"[data-native-element]\");\n    }\n    getCssClasses() {\n        const classList = [];\n        classList.push(\"control-input\");\n        if (this.component.cssClass) {\n            classList.push(this.component.cssClass);\n        }\n        if (!this.component.caption) {\n            classList.push(\"position-static\");\n        }\n        return classList.join(\" \");\n    }\n    getInnerControlContainerClass() {\n        const classList = [\"container\"];\n        if (this.component.disabled) {\n            classList.push(\"disabled\");\n        }\n        return classList.join(\" \");\n    }\n    handleClick() {\n        this.checkedChanged(true);\n    }\n    handleChange(event) {\n        this.component.checked = true;\n        const nativeInput = this.getNativeInput();\n        nativeInput.focus();\n        this.component.change.emit(event);\n    }\n    checkedChanged(isChecked) {\n        const nativeInput = this.getNativeInput();\n        const inputEl = nativeInput;\n        if (inputEl && inputEl.checked !== isChecked) {\n            inputEl.checked = isChecked;\n        }\n        clearTimeout(this.checkedTmr);\n        this.checkedTmr = setTimeout(() => {\n            // only emit onSelect when checked is true\n            if (this.didLoad && isChecked) {\n                this.component.gxSelect.emit({\n                    checked: isChecked,\n                    value: this.component.value\n                });\n            }\n        });\n    }\n    disabledChanged(isDisabled) {\n        const nativeInput = this.getNativeInput();\n        nativeInput.disabled = isDisabled;\n    }\n    componentDidLoad() {\n        this.didLoad = true;\n    }\n    render() {\n        const radioOption = this.component;\n        if (!this.inputId) {\n            this.inputId = radioOption.element.id\n                ? `${radioOption.element.id}__radio-option`\n                : `gx-radio-auto-id-${autoRadioId++}`;\n        }\n        const attris = {\n            \"aria-disabled\": radioOption.disabled ? \"true\" : undefined,\n            class: this.getCssClasses(),\n            \"data-native-element\": \"\",\n            disabled: radioOption.disabled,\n            id: this.inputId,\n            name: radioOption.name,\n            onChange: this.handleChange.bind(this),\n            onClick: this.handleClick.bind(this),\n            value: radioOption.value\n        };\n        const forAttris = {\n            for: attris.id\n        };\n        return (h(\"div\", { class: this.getInnerControlContainerClass(), \"data-part\": !radioOption.disabled ? \"option-control\" : \"\" },\n            h(\"div\", { class: \"option-container\" },\n                h(\"input\", Object.assign({}, attris, { type: \"radio\", checked: radioOption.checked })),\n                h(\"label\", { class: \"custom-option\" }),\n                h(\"svg\", { viewBox: \"-8 -8 16 16\" },\n                    h(\"circle\", { r: \"3\" }))),\n            h(\"label\", Object.assign({ class: \"custom-label\" }, forAttris), radioOption.caption)));\n    }\n}\n\nconst radioOptionCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-radio-option{display:block;--option-checked-color:#007bff;--option-border:1px solid #adb5bd;--option-border-radius:100%;--option-highlight-border-color:#007bff40}gx-radio-option[hidden]{display:none !important}gx-radio-option[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-radio-option .container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:start;justify-content:flex-start;-ms-flex:1;flex:1;overflow:hidden}gx-radio-option .container[data-part=option-control]:active{padding:0;background-color:unset;border:unset}gx-radio-option .container .option-container{display:-ms-flexbox;display:flex;padding:0.15rem 0.35rem 0.15rem 0.35rem}gx-radio-option .container .option-container .control-input{width:1rem;height:1rem;opacity:0}gx-radio-option .container .option-container .control-input:checked~.custom-option{border-color:var(--option-checked-color);background-color:var(--option-checked-color)}gx-radio-option .container .option-container .control-input:checked~svg{opacity:100}gx-radio-option .container .option-container .control-input:active:not(:disabled):not(:checked)~.custom-option{border-color:var(--option-highlight-border-color);background-color:var(--option-highlight-border-color)}gx-radio-option .container .option-container .control-input:active:not(:disabled)~.custom-option{-webkit-filter:brightness(85%);filter:brightness(85%)}gx-radio-option .container .option-container .control-input:focus~.custom-option{-webkit-box-shadow:0 0 0 0.15rem var(--option-highlight-border-color);box-shadow:0 0 0 0.15rem var(--option-highlight-border-color)}gx-radio-option .container .option-container .control-input:disabled~.custom-option{background-color:#a5a8aac0}gx-radio-option .container .option-container .custom-option{position:absolute;width:1rem;height:1rem;pointer-events:none;border:var(--option-border);border-radius:var(--option-border-radius);content:\\\"\\\";-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-radio-option .container .option-container svg{position:absolute;width:1rem;height:1rem;pointer-events:none;z-index:1;opacity:0;fill:white;fill-opacity:0.75;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-radio-option .container .custom-label{margin:0;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}\";\n\nconst RadioOption = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.change = createEvent(this, \"change\", 7);\n        this.gxSelect = createEvent(this, \"gxSelect\", 7);\n        this.gxRadioDidLoad = createEvent(this, \"gxRadioDidLoad\", 7);\n        this.gxRadioDidUnload = createEvent(this, \"gxRadioDidUnload\", 7);\n        /**\n         * This attribute lets you specify how this element will behave when hidden.\n         *\n         * | Value        | Details                                                                     |\n         * | ------------ | --------------------------------------------------------------------------- |\n         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |\n         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |\n         */\n        this.invisibleMode = \"collapse\";\n        /**\n         * This attribute lets you specify if the element is disabled.\n         * If disabled, it will not fire any user interaction related event\n         * (for example, click event).\n         */\n        this.disabled = false;\n        this.renderer = new RadioOptionRender(this);\n    }\n    checkedChanged(isChecked) {\n        this.renderer.checkedChanged(isChecked);\n    }\n    disabledChanged(isDisabled) {\n        this.renderer.disabledChanged(isDisabled);\n    }\n    componentDidLoad() {\n        this.gxRadioDidLoad.emit({ radio: this });\n        this.renderer.componentDidLoad();\n    }\n    componentDidUnload() {\n        this.gxRadioDidUnload.emit({ radio: this });\n    }\n    render() {\n        return h(Host, null, this.renderer.render());\n    }\n    get element() { return getElement(this); }\n    static get watchers() { return {\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nRadioOption.style = radioOptionCss;\n\nexport { RadioOption as gx_radio_option };\n"],"names":[],"sourceRoot":"webpack:///"}