{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-query-viewer_entry_js.js","mappings":";;;;;;;;;;;;;;AAA2F;;AAE3F,wCAAwC,oBAAoB,aAAa,WAAW,OAAO,uBAAuB,WAAW,OAAO,SAAS;;AAE7I;AACA;AACA,QAAQ,qDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAC,YAAY,6CAA6C;AACtF,YAAY,qDAAC,YAAY,wDAAwD;AACjF,YAAY,qDAAC,YAAY,4DAA4D;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,4LAA4L,+BAA+B,qCAAqC;AAChQ;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS,kCAAkC,uCAAuC,kCAAkC,uCAAuC,gCAAgC,mCAAmC;AAC9N;AACA,SAAS;AACT;AACA,SAAS,+BAA+B,iCAAiC;AACzE;AACA;AACA;AACA,gBAAgB,qDAAC,CAAC,iDAAI,QAAQ,qDAAC,aAAa,6DAA6D,GAAG,qDAAC,WAAW,yGAAyG;AACjO;AACA,oBAAoB,OAAO,qDAAU;AACrC;AACA;;AAE0C","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-query-viewer.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-10623738.js';\n\nconst queryViewerCss = \"gx-query-viewer{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}gx-query-viewer iframe{-ms-flex:1;flex:1;border:0}\";\n\nconst QueryViewer = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.mapServices = {\n            net: \"gxqueryviewerforsd.aspx\",\n            java: \"qviewer.services.gxqueryviewerforsd\"\n        };\n        this.propsNotToPost = [\n            \"baseUrl\",\n            \"env\",\n            \"mapServices\",\n            \"object\",\n            \"objectCall\",\n            \"propsNotToPost\",\n            \"parameters\",\n            \"elements\",\n            \"dataVersionId\"\n        ];\n        this.configurationObserver = new MutationObserver(() => {\n            this.configurationChangedHandler();\n        });\n    }\n    parameterValueChangedHandler(eventInfo) {\n        eventInfo.stopPropagation();\n        this.getParameters();\n    }\n    elementChangedHandler(eventInfo) {\n        eventInfo.stopPropagation();\n        this.getElements();\n    }\n    configurationChangedHandler() {\n        this.getParameters();\n        this.getElements();\n    }\n    componentWillLoad() {\n        this.getParameters();\n        this.getElements();\n    }\n    componentDidLoad() {\n        this.configurationObserver.observe(this.element, {\n            childList: true,\n            subtree: true\n        });\n    }\n    componentDidRender() {\n        const form = this.element.querySelector(\"form\");\n        form.submit();\n    }\n    disconnectedCallback() {\n        this.configurationObserver.disconnect();\n    }\n    parseObjectToObjectcall() {\n        try {\n            this.objectCall = JSON.parse(this.object);\n        }\n        catch (e) {\n            this.objectCall = null;\n        }\n    }\n    hasObjectCall() {\n        return Array.isArray(this.objectCall) && this.objectCall.length >= 2;\n    }\n    loadObjectNameFromObjectCall() {\n        if (this.hasObjectCall()) {\n            this.objectName = this.objectCall[1];\n        }\n    }\n    postData() {\n        this.parseObjectToObjectcall();\n        this.loadObjectNameFromObjectCall();\n        return [\n            ...Object.keys(QueryViewer.prototype)\n                .filter(key => !this.propsNotToPost.includes(key))\n                .map(key => h(\"input\", { type: \"hidden\", name: key, value: this[key] })),\n            h(\"input\", { type: \"hidden\", name: \"Elements\", value: this.elements }),\n            h(\"input\", { type: \"hidden\", name: \"Parameters\", value: this.parameters })\n        ];\n    }\n    getParameters() {\n        const parametersValue = [];\n        if (this.hasObjectCall()) {\n            this.objectCall.slice(2).forEach(value => {\n                const parameterObject = {};\n                parameterObject[\"Value\"] = encodeURIComponent(value);\n                parameterObject[\"Name\"] = \"\";\n                parametersValue.push(parameterObject);\n            });\n        }\n        else {\n            const parameters = Array.from(document.getElementsByTagName(\"gx-query-viewer-parameter\"));\n            parameters.forEach(parameter => {\n                const parameterObject = {};\n                parameterObject[\"Value\"] = encodeURIComponent(parameter.Value);\n                parameterObject[\"Name\"] = parameter.Name;\n                parametersValue.push(parameterObject);\n            });\n        }\n        this.parameters = JSON.stringify(parametersValue);\n    }\n    getElements() {\n        const elementsValue = [];\n        const elements = Array.from(document.getElementsByTagName(\"gx-query-viewer-element\"));\n        elements.forEach(ax => {\n            const elementObjectValue = {};\n            elementObjectValue[\"Name\"] = ax.name;\n            elementObjectValue[\"Title\"] = ax.elementTitle;\n            elementObjectValue[\"Visible\"] = ax.visible;\n            elementObjectValue[\"Type\"] = ax.type;\n            elementObjectValue[\"Axis\"] = ax.axis;\n            elementObjectValue[\"Aggregation\"] = ax.aggregation;\n            elementObjectValue[\"DataField\"] = ax.dataField;\n            if (ax.axisOrderType) {\n                elementObjectValue[\"AxisOrder\"] = { Type: ax.axisOrderType };\n                if (ax.axisOrderValues) {\n                    elementObjectValue[\"AxisOrder\"][\"Values\"] = ax.axisOrderValues;\n                }\n            }\n            if (ax.filterType) {\n                elementObjectValue[\"Filter\"] = { Type: ax.filterType };\n                if (ax.axisOrderValues) {\n                    elementObjectValue[\"Filter\"][\"Values\"] = ax.filterValues;\n                }\n            }\n            if (ax.expandCollapseType) {\n                elementObjectValue[\"ExpandCollapse\"] = { Type: ax.expandCollapseType };\n                if (ax.axisOrderValues) {\n                    elementObjectValue[\"ExpandCollapse\"][\"Values\"] =\n                        ax.expandCollapseValues;\n                }\n            }\n            const grouping = this.getGrouping(ax);\n            if (Object.keys(grouping).length > 0) {\n                elementObjectValue[\"Grouping\"] = grouping;\n            }\n            if (ax.raiseItemClick) {\n                const action = { RaiseItemClick: ax.raiseItemClick };\n                elementObjectValue[\"Action\"] = action;\n            }\n            const formats = Array.from(ax.getElementsByTagName(\"gx-query-viewer-element-format\"));\n            formats.forEach(format => {\n                const formatObject = {};\n                formatObject[\"Picture\"] = format.picture;\n                formatObject[\"Subtotals\"] = format.subtotals;\n                formatObject[\"CanDragToPages\"] = format.canDragToPages;\n                formatObject[\"Style\"] = format.formatStyle;\n                formatObject[\"TargetValue\"] = format.targetValue;\n                formatObject[\"MaximumValue\"] = format.maximumValue;\n                const styles = Array.from(ax.getElementsByTagName(\"gx-query-viewer-format-style\"));\n                const valuesStyles = [];\n                const conditionalStyles = [];\n                styles.forEach(style => {\n                    if (style.type === \"Values\") {\n                        const valueStyle = {\n                            Value: style.value,\n                            ApplyToRowOrColumn: style.applyToRowOrColumn,\n                            StyleOrClass: style.styleOrClass\n                        };\n                        valuesStyles.push(valueStyle);\n                    }\n                    else {\n                        const conditionalStyle = {\n                            Value1: style.value1,\n                            Value2: style.value2,\n                            Operator: style.operator,\n                            StyleOrClass: style.styleOrClass\n                        };\n                        conditionalStyles.push(conditionalStyle);\n                    }\n                });\n                if (valuesStyles.length > 0) {\n                    formatObject[\"ValuesStyle\"] = valuesStyles;\n                }\n                if (conditionalStyles.length > 0) {\n                    formatObject[\"ConditionalStyles\"] = conditionalStyles;\n                }\n                elementObjectValue[\"Format\"] = formatObject;\n            });\n            elementsValue.push(elementObjectValue);\n        });\n        this.elements = JSON.stringify(elementsValue);\n    }\n    getGrouping(ax) {\n        const grouping = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (ax.groupingGroupByYear && { GroupByYear: ax.groupingGroupByYear })), (ax.groupingYearTitle && {\n            YearTitle: ax.groupingYearTitle\n        })), (ax.groupingGroupBySemester && {\n            GroupBySemester: ax.groupingGroupBySemester\n        })), (ax.groupingSemesterTitle && {\n            SemesterTitle: ax.groupingSemesterTitle\n        })), (ax.groupingGroupByQuarter && {\n            GroupByQuarter: ax.groupingGroupByQuarter\n        })), (ax.groupingQuarterTitle && { QuarterTitle: ax.groupingQuarterTitle })), (ax.groupingGroupByMonth && { GroupByMonth: ax.groupingGroupByMonth })), (ax.groupingMonthTitle && { MonthTitle: ax.groupingMonthTitle })), (ax.groupingGroupByDayOfWeek && {\n            GroupByDayOfWeek: ax.groupingGroupByDayOfWeek\n        })), (ax.groupingDayOfWeekTitle && {\n            DayOfWeekTitle: ax.groupingDayOfWeekTitle\n        })), (ax.groupingHideValue && { HideValue: ax.groupingHideValue })));\n        return grouping;\n    }\n    render() {\n        return (h(Host, null, h(\"iframe\", { name: \"query_viewer\", \"data-version-id\": this.dataVersionId }), h(\"form\", { hidden: true, target: \"query_viewer\", action: this.baseUrl + this.mapServices[this.env], method: \"POST\" }, this.postData())));\n    }\n    get element() { return getElement(this); }\n};\nQueryViewer.style = queryViewerCss;\n\nexport { QueryViewer as gx_query_viewer };\n"],"names":[],"sourceRoot":"webpack:///"}