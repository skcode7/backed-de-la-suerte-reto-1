"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-radio-group_entry_js"],{

/***/ 9594:
/*!*************************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-radio-group.entry.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_radio_group": () => (/* binding */ RadioGroup)
/* harmony export */ });
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


const radioGroupCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-radio-group{display:-ms-flexbox;display:flex;margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);-ms-flex:1;flex:1}gx-radio-group[hidden]{display:none !important}gx-radio-group[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-radio-group[direction=vertical]{-ms-flex-direction:column;flex-direction:column}gx-radio-group[direction=horizontal]{-ms-flex-wrap:wrap;flex-wrap:wrap}";

const RadioGroup = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.change = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "change", 7);
        this.radios = [];
        /**
         * Specifies how the child `gx-radio-option` will be layed out.
         * It supports two values:
         *
         * * `horizontal`
         * * `vertical` (default)
         */
        this.direction = "horizontal";
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
    }
    disabledChanged() {
        this.setDisabled();
    }
    valueChanged() {
        // this radio group's value just changed
        // double check the button with this value is checked
        if (this.value === undefined) {
            // set to undefined
            // ensure all that are checked become unchecked
            this.radios
                .filter(r => r.checked)
                .forEach(radio => {
                radio.checked = false;
            });
        }
        else {
            let hasChecked = false;
            this.radios.forEach(radio => {
                if (radio.value === this.value) {
                    if (!radio.checked && !hasChecked) {
                        // correct value for this radio
                        // but this radio isn't checked yet
                        // and we haven't found a checked yet
                        // so CHECK IT!
                        radio.checked = true;
                    }
                    else if (hasChecked && radio.checked) {
                        // somehow we've got multiple radios
                        // with the same value, but only one can be checked
                        radio.checked = false;
                    }
                    // remember we've got a checked radio button now
                    hasChecked = true;
                }
                else if (radio.checked) {
                    // this radio doesn't have the correct value
                    // and it's also checked, so let's uncheck it
                    radio.checked = false;
                }
            });
        }
        if (this.didLoad) {
            // emit the new value
            this.change.emit({ value: this.value });
        }
    }
    onRadioDidLoad(ev) {
        const radio = ev.target;
        this.radios.push(radio);
        radio.name = this.name;
        if (this.value !== undefined && radio.value === this.value) {
            // this radio-group has a value and this
            // radio equals the correct radio-group value
            // so let's check this radio
            radio.checked = true;
        }
        else if (this.value === undefined && radio.checked) {
            // this radio-group does not have a value
            // but this radio is checked, so let's set the
            // radio-group's value from the checked radio
            this.value = radio.value;
        }
        else if (radio.checked) {
            // if it doesn't match one of the above cases, but the
            // radio is still checked, then we need to uncheck it
            radio.checked = false;
        }
    }
    onRadioDidUnload(ev) {
        const index = this.radios.indexOf(ev.target);
        if (index > -1) {
            this.radios.splice(index, 1);
        }
    }
    onRadioSelect(ev) {
        this.radios.forEach(radio => {
            if (radio === ev.target) {
                if (radio.value !== this.value) {
                    this.value = radio.value;
                }
            }
            else {
                radio.checked = false;
            }
        });
    }
    setDisabled() {
        this.radios.forEach(radio => {
            radio.disabled = this.disabled || this.readonly;
        });
    }
    componentDidLoad() {
        this.setDisabled();
        this.didLoad = true;
    }
    render() {
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, { role: "radiogroup", "data-readonly": "" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "disabled": ["disabledChanged"],
        "value": ["valueChanged"]
    }; }
};
RadioGroup.style = radioGroupCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-radio-group_entry_js.js.map