"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-rating_entry_js"],{

/***/ 108:
/*!********************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-rating.entry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_rating": () => (/* binding */ Rating)
/* harmony export */ });
/* harmony import */ var C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 4475);
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


const ratingCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-rating{display:block;--active-stars-color:#e4ac13;--active-stars-shadow-color:var(--active-stars-color);--inactive-stars-color:rgba(80, 80, 80, 0.6);--inactive-stars-hover-color:rgba(80, 80, 80, 0.4);--star-width:2em;--star-heigth:auto;--star-separation:2px}gx-rating[hidden]{display:none !important}gx-rating[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-rating div.rating:hover svg:nth-child(n) polygon{fill:var(--active-stars-color)}gx-rating div.rating:hover svg:nth-child(n):hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.rating svg{height:var(--star-heigth);width:var(--star-width);padding:0px var(--star-separation);cursor:pointer}gx-rating div.rating svg polygon{fill:var(--inactive-stars-color);-webkit-transition:0.4s ease;transition:0.4s ease}gx-rating input{display:none}gx-rating div.rating{height:-webkit-max-content;height:-moz-max-content;height:max-content;width:-webkit-max-content;width:-moz-max-content;width:max-content;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;-ms-flex-wrap:wrap;flex-wrap:wrap}gx-rating div.rating[data-score=\"1\"] svg{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.rating[data-score=\"1\"] svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"1\"] svg:nth-child(1)~svg{-webkit-filter:none;filter:none}gx-rating div.rating[data-score=\"1\"] svg:nth-child(1)~svg polygon{fill:var(--inactive-stars-color)}gx-rating div.rating[data-score=\"1\"]:hover svg~svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"1\"]:hover svg:hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.rating[data-score=\"2\"] svg{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.rating[data-score=\"2\"] svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"2\"] svg:nth-child(2)~svg{-webkit-filter:none;filter:none}gx-rating div.rating[data-score=\"2\"] svg:nth-child(2)~svg polygon{fill:var(--inactive-stars-color)}gx-rating div.rating[data-score=\"2\"]:hover svg~svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"2\"]:hover svg:hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.rating[data-score=\"3\"] svg{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.rating[data-score=\"3\"] svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"3\"] svg:nth-child(3)~svg{-webkit-filter:none;filter:none}gx-rating div.rating[data-score=\"3\"] svg:nth-child(3)~svg polygon{fill:var(--inactive-stars-color)}gx-rating div.rating[data-score=\"3\"]:hover svg~svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"3\"]:hover svg:hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.rating[data-score=\"4\"] svg{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.rating[data-score=\"4\"] svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"4\"] svg:nth-child(4)~svg{-webkit-filter:none;filter:none}gx-rating div.rating[data-score=\"4\"] svg:nth-child(4)~svg polygon{fill:var(--inactive-stars-color)}gx-rating div.rating[data-score=\"4\"]:hover svg~svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"4\"]:hover svg:hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.rating[data-score=\"5\"] svg{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.rating[data-score=\"5\"] svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"5\"] svg:nth-child(5)~svg{-webkit-filter:none;filter:none}gx-rating div.rating[data-score=\"5\"] svg:nth-child(5)~svg polygon{fill:var(--inactive-stars-color)}gx-rating div.rating[data-score=\"5\"]:hover svg~svg polygon{fill:var(--active-stars-color)}gx-rating div.rating[data-score=\"5\"]:hover svg:hover~svg polygon{fill:var(--inactive-stars-hover-color)}gx-rating div.score{height:-webkit-max-content;height:-moz-max-content;height:max-content;width:-webkit-max-content;width:-moz-max-content;width:max-content;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;-ms-flex-wrap:wrap;flex-wrap:wrap}gx-rating div.score svg{height:auto;width:2em;padding:0px var(--star-separation)}gx-rating div.score svg polygon{fill:var(--inactive-stars-color);-webkit-transition:0.3s ease;transition:0.3s ease}gx-rating div.score svg.active{-webkit-filter:drop-shadow(0 0 2px var(--active-stars-shadow-color));filter:drop-shadow(0 0 2px var(--active-stars-shadow-color))}gx-rating div.score svg.active polygon{fill:var(--active-stars-color)}";
let autoInputRangeId = 0;
const Rating = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.input = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "input", 7);
    this.svgViewport = {
      viewBox: "0 0 100 100"
    };
    /**
     * This attribute allows you specify if the element is disabled.
     * If disabled, it will not trigger any user interaction related event
     * (for example, click event).
     */

    this.disabled = false;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     * _Disable by default_
     */

    this.readonly = false;
    /**
     * The current value displayed by the component.
     *
     */

    this.value = 0;
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(event) {
    const element = event.target;
    const targetParent = element.parentElement;
    const score = element.nodeName === "polygon" ? Array.from(targetParent.parentElement.children).indexOf(targetParent) + 1 : Array.from(targetParent.children).indexOf(element) + 1;
    this.value = score;
    this.input.emit(this);
  }
  /**
   * Returns the id of the inner `input` element (if set).
   */


  getNativeInputId() {
    var _this = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.element.querySelector("input").id;
    })();
  }

  renderStarsRating() {
    const stars = [];

    for (let i = 0; i < 5; i++) {
      stars.push((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("svg", Object.assign({
        class: "rating"
      }, this.svgViewport, {
        onClick: this.handleClick
      }), this.renderStarShape()));
    }

    return stars;
  }

  renderStarsScore() {
    const stars = [];
    let percent;
    let starsScore;

    if (this.maxValue - this.value >= 0) {
      percent = this.value * 100 / this.maxValue;
      starsScore = Math.round(percent * 5 / 100);
    } else {
      console.error("'value' cannot be greater than 'max-value'");
    }

    for (let i = 0; i < 5; i++) {
      stars.push((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("svg", Object.assign({
        class: {
          active: i < starsScore,
          score: true
        }
      }, this.svgViewport), this.renderStarShape()));
    }

    return stars;
  }

  render() {
    const valuesDifference = this.maxValue - this.value;

    if (!this.inputId) {
      this.element.id ? this.inputId = `${this.element.id}_inputRange` : this.inputId = `gx-inputRange-auto-id-${autoInputRangeId++}`;
    }

    if (valuesDifference >= 0 && this.readonly || !this.readonly) {
      return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", {
        id: this.inputId,
        type: "range",
        min: "0",
        max: this.readonly ? this.maxValue : 5,
        step: "1",
        value: this.value
      }), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: {
          rating: !this.readonly,
          score: this.readonly
        },
        "data-score": this.value !== 0 ? this.value : undefined
      }, this.readonly ? this.renderStarsScore() : this.renderStarsRating()));
    } else {
      if (this.maxValue !== 0) {
        console.error("'value' cannot be higher than 'max-value'.", this.element);
      } else {
        console.error("'max-value' has not a value set.", this.element);
      }
    }
  }

  renderStarShape() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("polygon", {
      points: "50,0 15,95 100,35 0,35 85,95"
    });
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
Rating.style = ratingCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-rating_entry_js.js.map