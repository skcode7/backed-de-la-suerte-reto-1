"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-checkbox_entry_js"],{

/***/ 5604:
/*!**********************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-checkbox.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_checkbox": () => (/* binding */ CheckBox)
/* harmony export */ });
/* harmony import */ var C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 4475);
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


let autoCheckBoxId = 0;

class CheckBoxRender {
  constructor(component, handlers) {
    this.component = component;
    this.handleChange = handlers.handleChange;
  }

  getNativeInputId() {
    return this.getNativeInput().id;
  }

  getNativeInput() {
    return this.component.element.querySelector("[data-native-element]");
  }

  getCssClasses() {
    const checkbox = this.component;
    const classList = [];
    classList.push("control-input");

    if (checkbox.cssClass) {
      classList.push(checkbox.cssClass);
    }

    if (!checkbox.caption) {
      classList.push("position-static");
    }

    return classList.join(" ");
  }

  getValueFromEvent(event) {
    return event.target && event.target.checked;
  }
  /**
   * Update the native input element when the value changes
   */


  checkedChanged() {
    const inputEl = this.getNativeInput();

    if (inputEl && inputEl.checked !== this.component.checked) {
      inputEl.checked = this.component.checked;
    }
  }

  render() {
    const checkbox = this.component;

    if (!this.inputId) {
      this.inputId = checkbox.element.id ? `${checkbox.element.id}__checkbox` : `gx-checkbox-auto-id-${autoCheckBoxId++}`;
    }

    const attris = {
      "aria-disabled": checkbox.disabled ? "true" : undefined,
      class: this.getCssClasses(),
      "data-native-element": "",
      disabled: checkbox.disabled || checkbox.readonly,
      id: this.inputId,
      onInput: this.handleChange
    };
    const forAttris = {
      for: attris.id
    };
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "data-readonly": ""
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "container",
      "data-part": !checkbox.disabled && !checkbox.readonly ? "option-control" : ""
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "option-container"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", Object.assign({}, attris, {
      type: "checkbox",
      checked: checkbox.checked,
      value: checkbox.checked ? checkbox.checkedValue : checkbox.unCheckedValue
    })), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", {
      class: "custom-option"
    }), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("svg", {
      viewBox: "-4 -4 16 16"
    }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("path", {
      d: "M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z"
    }))), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", Object.assign({
      class: "custom-label"
    }, forAttris, {
      "aria-hidden": (!checkbox.caption).toString()
    }), checkbox.caption)));
  }

}

const checkboxCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-checkbox{display:-ms-flexbox;display:flex;--option-checked-color:#007bff;--option-border:1px solid #adb5bd;--option-border-radius:100%;--option-highlight-border-color:#007bff40;--option-border-radius:25%;margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);-ms-flex:1;flex:1}gx-checkbox[hidden]{display:none !important}gx-checkbox[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-checkbox .container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:start;justify-content:flex-start;-ms-flex:1;flex:1;overflow:hidden}gx-checkbox .container[data-part=option-control]:active{padding:0;background-color:unset;border:unset}gx-checkbox .container .option-container{display:-ms-flexbox;display:flex;padding:0.15rem 0.35rem 0.15rem 0.35rem}gx-checkbox .container .option-container .control-input{width:1rem;height:1rem;opacity:0}gx-checkbox .container .option-container .control-input:checked~.custom-option{border-color:var(--option-checked-color);background-color:var(--option-checked-color)}gx-checkbox .container .option-container .control-input:checked~svg{opacity:100}gx-checkbox .container .option-container .control-input:active:not(:disabled):not(:checked)~.custom-option{border-color:var(--option-highlight-border-color);background-color:var(--option-highlight-border-color)}gx-checkbox .container .option-container .control-input:active:not(:disabled)~.custom-option{-webkit-filter:brightness(85%);filter:brightness(85%)}gx-checkbox .container .option-container .control-input:focus~.custom-option{-webkit-box-shadow:0 0 0 0.15rem var(--option-highlight-border-color);box-shadow:0 0 0 0.15rem var(--option-highlight-border-color)}gx-checkbox .container .option-container .control-input:disabled~.custom-option{background-color:#a5a8aac0}gx-checkbox .container .option-container .custom-option{position:absolute;width:1rem;height:1rem;pointer-events:none;border:var(--option-border);border-radius:var(--option-border-radius);content:\"\";-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-checkbox .container .option-container svg{position:absolute;width:1rem;height:1rem;pointer-events:none;z-index:1;opacity:0;fill:white;fill-opacity:0.75;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-checkbox .container .custom-label{margin:0;-webkit-transition:0.15s ease-in-out;transition:0.15s ease-in-out}gx-checkbox>[data-readonly]{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}";
const CheckBox = class {
  constructor(hostRef) {
    (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.input = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "input", 7);
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */

    this.invisibleMode = "collapse";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */

    this.disabled = false;
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     */

    this.readonly = false;
    this.renderer = new CheckBoxRender(this, {
      handleChange: this.handleChange.bind(this)
    });
  }
  /**
   * Returns the id of the inner `input` element (if set).
   */


  getNativeInputId() {
    var _this = this;

    return (0,C_KBs_Koder_SupaBase_CSharpModel_mobile_Angular_Menu_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.renderer.getNativeInputId();
    })();
  }

  checkedChanged() {
    this.renderer.checkedChanged();
  }

  componentWillLoad() {
    this.checked = this.value === this.checkedValue;
  }

  valueChanged() {
    this.checked = this.value === this.checkedValue;
  }

  handleChange(event) {
    event.stopPropagation();
    this.checked = this.renderer.getValueFromEvent(event);
    this.updateValue();
    this.input.emit(event);
  }

  updateValue() {
    this.value = this.checked ? this.checkedValue : this.unCheckedValue;
  }

  render() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.H, null, this.renderer.render());
  }

  get element() {
    return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

  static get watchers() {
    return {
      "checked": ["checkedChanged"],
      "value": ["valueChanged"]
    };
  }

};
CheckBox.style = checkboxCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-checkbox_entry_js.js.map