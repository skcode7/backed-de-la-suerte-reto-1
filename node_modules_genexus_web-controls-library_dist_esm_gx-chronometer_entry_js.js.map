{"version":3,"file":"node_modules_genexus_web-controls-library_dist_esm_gx-chronometer_entry_js.js","mappings":"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","sources":["./node_modules/@genexus/web-controls-library/dist/esm/gx-chronometer.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-10623738.js';\n\nvar TimerState;\n(function (TimerState) {\n    TimerState[\"Running\"] = \"running\";\n    TimerState[\"Stopped\"] = \"stopped\";\n    TimerState[\"Reset\"] = \"reset\";\n})(TimerState || (TimerState = {}));\n\nconst chronometerCss = \".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-chronometer{display:inline}gx-chronometer[hidden]{display:none !important}gx-chronometer[hidden][invisible-mode=keep-space]{display:inline !important;visibility:hidden}\";\n\nconst Chronometer = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.input = createEvent(this, \"input\", 7);\n        this.change = createEvent(this, \"change\", 7);\n        this.end = createEvent(this, \"end\", 7);\n        this.tick = createEvent(this, \"tick\", 7);\n        this.startedTime = 0;\n        this.started = false;\n        this.elapsedTime = 0;\n        /**\n         * This attribute lets you specify how this element will behave when hidden.\n         *\n         * | Value        | Details                                                                     |\n         * | ------------ | --------------------------------------------------------------------------- |\n         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |\n         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |\n         */\n        this.invisibleMode = \"collapse\";\n        /**\n         * When the chronometer reaches this value,\n         * MaxValueText will be shown instead of the Chronometer value.\n         */\n        this.maxValue = 0;\n        /**\n         * Time unit: (s) seconds or (ms) milliseconds for every time control Property.\n         */\n        this.unit = \"s\";\n        /**\n         * Defines the interval that the function onTick will be called.\n         */\n        this.interval = 1;\n        /**\n         * State of the Chronometer.\n         */\n        this.state = TimerState.Stopped;\n        /**\n         * The value of the control.\n         */\n        this.value = 0;\n    }\n    /**\n     * Returns the id of the inner `input` element (if set).\n     */\n    async getNativeInputId() {\n        return this.element;\n    }\n    componentWillLoad() {\n        this.elapsedTime = this.value * this.getUnit();\n    }\n    componentDidUnload() {\n        this.stop();\n    }\n    /**\n     * Starts the Chronometer\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        this.startedTime = Date.now() - this.elapsedTime;\n        this.updateElapsedTime();\n        this.timer = window.setInterval(() => {\n            this.updateElapsedTime();\n            if (this.maxValue > 0 &&\n                this.elapsedTime >= this.maxValue * this.getUnit()) {\n                this.end.emit();\n                this.stop();\n            }\n        }, 1000);\n        if (this.interval > 0) {\n            this.eventTimer = window.setInterval(() => {\n                this.tickHandler();\n            }, this.interval * this.getUnit());\n        }\n    }\n    /**\n     * Stops the Chronometer\n     */\n    async stop() {\n        window.clearInterval(this.eventTimer);\n        window.clearInterval(this.timer);\n        this.started = false;\n        this.startedTime = 0;\n    }\n    /**\n     * Stops and set to 0 the Chronometer.\n     */\n    async reset() {\n        this.stop();\n        this.value = 0;\n        this.startedTime = 0;\n        this.elapsedTime = 0;\n    }\n    handleChange() {\n        this.input.emit();\n        this.change.emit();\n    }\n    tickHandler() {\n        this.tick.emit();\n    }\n    stateChanged(newState, oldState) {\n        if (oldState === newState) {\n            return;\n        }\n        switch (newState) {\n            case TimerState.Running:\n                this.start();\n                break;\n            case TimerState.Stopped:\n                this.stop();\n                break;\n            case TimerState.Reset:\n                this.reset();\n                break;\n        }\n    }\n    getUnit() {\n        return this.unit === \"s\" ? 1000 : 1;\n    }\n    updateElapsedTime() {\n        this.elapsedTime = Date.now() - this.startedTime;\n        this.value = Math.floor(this.elapsedTime / this.getUnit());\n    }\n    render() {\n        const time = Math.floor(this.elapsedTime / 1000);\n        const maxVal = this.maxValue * this.getUnit();\n        const maxValueReached = this.elapsedTime > maxVal && maxVal !== 0;\n        return h(\"span\", null, maxValueReached ? this.maxValueText : time);\n    }\n    get element() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"handleChange\"],\n        \"state\": [\"stateChanged\"]\n    }; }\n};\nChronometer.style = chronometerCss;\n\nexport { Chronometer as gx_chronometer };\n"],"names":["r","registerInstance","c","createEvent","h","g","getElement","TimerState","chronometerCss","Chronometer","constructor","hostRef","input","change","end","tick","startedTime","started","elapsedTime","invisibleMode","maxValue","unit","interval","state","Stopped","value","getNativeInputId","element","componentWillLoad","getUnit","componentDidUnload","stop","start","Date","now","updateElapsedTime","timer","window","setInterval","emit","eventTimer","tickHandler","clearInterval","reset","handleChange","stateChanged","newState","oldState","Running","Reset","Math","floor","render","time","maxVal","maxValueReached","maxValueText","watchers","style","gx_chronometer"],"sourceRoot":"webpack:///"}