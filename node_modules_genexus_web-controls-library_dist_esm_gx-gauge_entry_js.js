"use strict";
(self["webpackChunkgenexus_web_application"] = self["webpackChunkgenexus_web_application"] || []).push([["node_modules_genexus_web-controls-library_dist_esm_gx-gauge_entry_js"],{

/***/ 1004:
/*!*******************************************************************************!*\
  !*** ./node_modules/@genexus/web-controls-library/dist/esm/gx-gauge.entry.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gx_gauge": () => (/* binding */ Gauge)
/* harmony export */ });
/* harmony import */ var _index_10623738_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-10623738.js */ 9689);


const gaugeCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden}.line-measuring{visibility:hidden;position:absolute}gx-gauge{--center-circle-text-color:rgba(44, 44, 44, 1);--center-circle-background-color:rgba(255, 255, 255, 0);--indicator-circle-background-color:rgba(44, 44, 44, 1);--stroke-linecap:initial;--stroke-animation-duration:1s;--value-text-color:rgba(44, 44, 44, 1);--value-text-background-color:rgba(255, 255, 255, 0.5);--max-value-background-color:rgba(255, 255, 255, 0.5);--max-value-text-color:rgba(40, 40, 40, 0.8);--min-value-background-color:rgba(255, 255, 255, 0.5);--min-value-text-color:rgba(40, 40, 40, 0.8);--indicator-line-background-color:rgba(44, 44, 44, 1);--empty-range-background-color:rgba(192, 192, 192, 0.5);display:-ms-flexbox;display:flex;position:relative;width:100%;margin-top:var(--margin-top, 0);margin-right:var(--margin-right, 0);margin-bottom:var(--margin-bottom, 0);margin-left:var(--margin-left, 0);-webkit-transition:background-color 0.25s, border-color 0.25s;transition:background-color 0.25s, border-color 0.25s}@-webkit-keyframes delay-animation-circle{0%{stroke-linecap:initial;stroke-dasharray:var(--stroke-dasharray-initial)}100%{stroke-linecap:initial;stroke-dasharray:var(--stroke-dasharray-initial)}}@keyframes delay-animation-circle{0%{stroke-linecap:initial;stroke-dasharray:var(--stroke-dasharray-initial)}100%{stroke-linecap:initial;stroke-dasharray:var(--stroke-dasharray-initial)}}@-webkit-keyframes loading-animation-circle{0%{stroke-dasharray:var(--stroke-dasharray-initial)}100%{stroke-dasharray:var(--stroke-dasharray)}}@keyframes loading-animation-circle{0%{stroke-dasharray:var(--stroke-dasharray-initial)}100%{stroke-dasharray:var(--stroke-dasharray)}}@-webkit-keyframes delay-animation-line{0%{width:0}100%{width:0}}@keyframes delay-animation-line{0%{width:0}100%{width:0}}@-webkit-keyframes loading-animation-line{0%{width:0}100%{width:var(--range-width)}}@keyframes loading-animation-line{0%{width:0}100%{width:var(--range-width)}}gx-gauge .line-gauge-container{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:100%;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}gx-gauge .line-gauge-container .current-value-container{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;width:100%;height:1.25em;-webkit-transition:height 0.25s;transition:height 0.25s}gx-gauge .line-gauge-container .current-value-container .current-value{height:80%;line-height:1em;font-weight:700;z-index:1;-webkit-transition:margin-left 0.25s, font-size 0.25s, background-color 0.25s, color 0.25s, -webkit-transform 0.25s;transition:margin-left 0.25s, font-size 0.25s, background-color 0.25s, color 0.25s, -webkit-transform 0.25s;transition:margin-left 0.25s, transform 0.25s, font-size 0.25s, background-color 0.25s, color 0.25s;transition:margin-left 0.25s, transform 0.25s, font-size 0.25s, background-color 0.25s, color 0.25s, -webkit-transform 0.25s;background-color:var(--value-text-background-color);color:var(--value-text-color)}gx-gauge .line-gauge-container .current-value-container .current-value.center-align{margin-left:var(--percentage, 0);-webkit-transform:translateX(-50%);transform:translateX(-50%)}gx-gauge .line-gauge-container .current-value-container .current-value.right-align{margin-left:100%;-webkit-transform:translateX(-100%);transform:translateX(-100%)}gx-gauge .line-gauge-container .current-value-container+.ranges-labels-and-indicator-container .ranges-and-labels-container{margin-top:4px}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container{display:-ms-flexbox;display:flex;position:relative;width:100%;-webkit-transition:width 0.25s, height 0.25s;transition:width 0.25s, height 0.25s}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .indicator{display:block;position:absolute;height:100%;width:1.125%;z-index:1;-webkit-transition:margin-left 0.25s, background-color 0.25s, -webkit-transform 0.25s;transition:margin-left 0.25s, background-color 0.25s, -webkit-transform 0.25s;transition:margin-left 0.25s, transform 0.25s, background-color 0.25s;transition:margin-left 0.25s, transform 0.25s, background-color 0.25s, -webkit-transform 0.25s;background-color:var(--indicator-line-background-color)}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .indicator.center-align{margin-left:var(--percentage, 0);-webkit-transform:translateX(-50%);transform:translateX(-50%)}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .indicator.right-align{margin-left:100%;-webkit-transform:translateX(-100%);transform:translateX(-100%)}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .ranges-and-labels-container{position:relative;overflow:hidden;width:100%;background-color:var(--empty-range-background-color);-webkit-transition:background-color 0.25s;transition:background-color 0.25s}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .ranges-and-labels-container .range{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;width:var(--range-width);height:100%;position:absolute;-webkit-transition:width 0.25s;transition:width 0.25s;-webkit-animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration))}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .ranges-and-labels-container .labels-container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:relative;width:100%;height:100%;overflow:unset}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .ranges-and-labels-container .labels-container .labels-subcontainer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%;height:1.0625em}gx-gauge .line-gauge-container .ranges-labels-and-indicator-container .ranges-and-labels-container .labels-container .labels-subcontainer .range-label{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;position:absolute;line-height:1.125em;width:var(--range-width);max-height:100%;-webkit-filter:brightness(0.5);filter:brightness(0.5);text-align:center;overflow:hidden;-webkit-animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));-webkit-transition:height 0.25s, width 0.25s, font-size 0.25s;transition:height 0.25s, width 0.25s, font-size 0.25s}gx-gauge .line-gauge-container .min-max-and-labels-container{display:-ms-flexbox;display:flex;-ms-flex-align:end;align-items:flex-end;position:relative;width:100%;height:1.25em;-webkit-transition:width 0.25s, height 0.25s, font-size 0.25s;transition:width 0.25s, height 0.25s, font-size 0.25s}gx-gauge .line-gauge-container .min-max-and-labels-container .min-max-values-container{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;width:100%;height:1em;font-weight:500;z-index:1;pointer-events:none}gx-gauge .line-gauge-container .min-max-and-labels-container .min-max-values-container .min-value,gx-gauge .line-gauge-container .min-max-and-labels-container .min-max-values-container .max-value{line-height:1em;pointer-events:all;-webkit-transition:background-color 0.25s, color 0.25s;transition:background-color 0.25s, color 0.25s}gx-gauge .line-gauge-container .min-max-and-labels-container .min-max-values-container .max-value{background-color:var(--max-value-background-color);color:var(--max-value-text-color)}gx-gauge .line-gauge-container .min-max-and-labels-container .min-max-values-container .min-value{background-color:var(--min-value-background-color);color:var(--min-value-text-color)}gx-gauge .line-gauge-container .min-max-and-labels-container .labels-container{display:-ms-flexbox;display:flex;-ms-flex-align:baseline;align-items:baseline;position:absolute;width:100%;height:1.125em;overflow:hidden}gx-gauge .line-gauge-container .min-max-and-labels-container .labels-container .labels-subcontainer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%;height:1.0625em}gx-gauge .line-gauge-container .min-max-and-labels-container .labels-container .labels-subcontainer .range-label{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;position:absolute;line-height:1.125em;width:var(--range-width);max-height:100%;-webkit-filter:brightness(0.5);filter:brightness(0.5);text-align:center;overflow:hidden;-webkit-animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));animation:delay-animation-line calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-line var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));-webkit-transition:width 0.25s;transition:width 0.25s}gx-gauge .circle-gauge-container{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;-ms-flex-item-align:stretch;align-self:stretch;position:relative}gx-gauge .circle-gauge-container .svg-and-indicator-container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;position:relative;width:100%;height:100%}gx-gauge .circle-gauge-container .svg-and-indicator-container svg{width:100%;height:100%;min-width:5px;min-height:5px}gx-gauge .circle-gauge-container .svg-and-indicator-container svg .circle-range{fill:none;stroke-linecap:var(--stroke-linecap, initial);-webkit-transition:stroke 0.25s, stroke-dasharray 0.25s;transition:stroke 0.25s, stroke-dasharray 0.25s;-webkit-animation:delay-animation-circle calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-circle var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration));animation:delay-animation-circle calc(var(--child-number) * var(--stroke-animation-duration)), loading-animation-circle var(--stroke-animation-duration) ease-in-out calc(var(--child-number) * var(--stroke-animation-duration))}gx-gauge .circle-gauge-container .svg-and-indicator-container svg .background-circle{fill:none;stroke:var(--empty-range-background-color);-webkit-transition:stroke 0.25s;transition:stroke 0.25s}gx-gauge .circle-gauge-container .svg-and-indicator-container .indicator-container{position:absolute;width:100%;height:1.125%;-webkit-transition:-webkit-transform 0.25s;transition:-webkit-transform 0.25s;transition:transform 0.25s;transition:transform 0.25s, -webkit-transform 0.25s}gx-gauge .circle-gauge-container .svg-and-indicator-container .indicator-container .indicator{height:100%;-webkit-transition:background-color 0.25s;transition:background-color 0.25s;background-color:var(--indicator-circle-background-color)}gx-gauge .circle-gauge-container .current-value-container{position:absolute}gx-gauge .circle-gauge-container .current-value-container>span.current-value{display:block;line-height:100%;padding-bottom:0.125em;font-weight:900;-webkit-transition:background-color 0.25s, color 0.25s;transition:background-color 0.25s, color 0.25s;color:var(--center-circle-text-color);background-color:var(--center-circle-background-color)}";

const Gauge = class {
    constructor(hostRef) {
        (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.gxGaugeDidLoad = (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "gxGaugeDidLoad", 7);
        /**
         * This property allows selecting the gauge type. The allowed values are `circle` or `line` (defautl).
         */
        this.type = "line";
        /**
         *  Set `true` to display the current value. Default is `false`.
         *
         */
        this.showValue = false;
        /**
         *  Set `true` to display the minimum and maximum value. Default is `false`.
         *
         */
        this.showMinMax = false;
        /**
         * The minimum value of the gauge
         * 0 by Default
         */
        this.minValue = 0;
        /**
         * Allows specify the width of the circumference _(When gauge is circle type)_ or the width of the bar _(When gauge is Line type)_ in % relative the component size.
         *
         */
        this.thickness = 10;
        this.rangesChildren = [];
        this.labelsOverflow = false;
        this.lineCurrentValuePosition = "Center";
        this.lineIndicatorPosition = "Center";
        /*  Used to set to the gauge an observer when
              - type == "line" or (`showValue` changes from `false` to `true` and
                type == "circle").
              - And the component has finished its rendering phase
         */
        this.shouldSetGaugeObserver = false;
        this.maxValueAux = this.minValue;
        this.totalAmount = 0;
    }
    /*  Used to connect and disconnect the resizeObserver based on the value of the
        `type` property.
     */
    typeHandler(newValue) {
        // We always disconnect the observer
        this.disconnectObserver();
        /*  If the type will change to "line" or `showValue == true` and the type
            will change to "circle", we set the resizeObserver at the end of the
            next rendering phase.
         */
        this.shouldSetGaugeObserver =
            newValue === "line" || (this.showValue && newValue === "circle");
    }
    /*  Used to connect and disconnect the resizeObserver based on the value of the
        `showValue` property.
     */
    showValueHandler(newValue) {
        // We always disconnect the observer
        this.disconnectObserver();
        /*  If the `showValue` option will be turned on, we set the resizeObserver
            at the end of the next rendering phase.
         */
        this.shouldSetGaugeObserver =
            newValue && (this.type === "line" || this.type === "circle");
    }
    labelsPositionHandler(newValue, oldValue) {
        // Used only in line gauge type
        if (this.type === "line") {
            /*  It means that the labels were inside the .range-container and the
                thickness will decrease, so it might be necessary to change the
                position of the labels, because they will overflow.
             */
            if (!this.labelsOverflow && newValue < oldValue) {
                this.decideLabelsPosition();
                /*  It means that the labels were outside of the .range-container and the
                    thickness will increase, so it might be necessary to change the
                    position of the labels, because they will not overflow anymore.
                */
            }
            else if (this.labelsOverflow && newValue > oldValue) {
                this.decideLabelsPosition();
            }
        }
    }
    onGaugeRangeDidLoad({ detail: childRange }) {
        this.rangesChildren = [...this.rangesChildren, childRange];
        this.totalAmount += childRange.amount;
        // Possible improvement here. Check the approach applied in navbar.jsx line 103
        childRange.element.addEventListener("gxGaugeRangeDidUnload", () => {
            this.rangesChildren = this.rangesChildren.filter(elementToSave => elementToSave != childRange);
            this.totalAmount -= childRange.amount;
        });
        childRange.element.addEventListener("gxGaugeRangeDidUpdate", () => {
            const index = this.rangesChildren.findIndex(elementFinding => elementFinding === childRange);
            this.rangesChildren.splice(index, 1, childRange);
            this.totalAmount = 0;
            for (const childInstance of this.rangesChildren) {
                this.totalAmount += childInstance.amount;
            }
        });
    }
    /*  If showValue == true and gauge type == circle, it creates a
        ResizeObserver to implement the font and indicator container
        responsiveness
    */
    connectedCallback() {
        if (this.showValue && this.type === "circle") {
            this.setCircleGaugeObserver();
        }
    }
    /*  If gauge type == line, it creates a ResizeObserver to implement
        `current-value` and `indicator` centering responsiveness and range labels
        responsiveness
    */
    componentDidLoad() {
        if (this.type === "line") {
            this.setLineGaugeObserver();
        }
    }
    /*  After the render, it asks for 'getBoundingClientRect()' and centers the
        'current-value' in line gauge type
    */
    componentDidRender() {
        if (this.showValue && this.type === "line") {
            this.setValueAndIndicatorPosition();
        }
        if (this.shouldSetGaugeObserver) {
            if (this.type == "line") {
                this.setLineGaugeObserver();
            }
            else {
                this.setCircleGaugeObserver();
            }
            this.shouldSetGaugeObserver = false;
        }
    }
    disconnectedCallback() {
        this.disconnectObserver();
    }
    /*  Preconditions:
          this.showValue === True
          this.type === "circle"
     */
    setCircleGaugeObserver() {
        this.watchForItemsObserver = new ResizeObserver(() => {
            const fontSize = Math.min(this.SVGcircle.getBoundingClientRect().height, this.SVGcircle.getBoundingClientRect().width) / 2.5;
            // Updates the font size
            this.circleCurrentValue.style.fontSize = `${fontSize}px`;
        });
        // Observe the gauge
        this.watchForItemsObserver.observe(this.element);
    }
    /*  Preconditions:
          this.type === "line"
          The component has finished its rendering phase
     */
    setLineGaugeObserver() {
        this.watchForItemsObserver = new ResizeObserver(() => {
            if (this.showValue) {
                this.setValueAndIndicatorPosition();
            }
            this.decideLabelsPosition();
        });
        // Observe the `labels-subcontainer` in the line gauge type
        this.watchForItemsObserver.observe(this.labelsSubContainer);
    }
    disconnectObserver() {
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    }
    // If maxValue is undefined, it defines the maxValue as the sum of the amounts plus minValue
    updateMaxValueAux() {
        this.maxValueAux =
            this.maxValue === undefined
                ? this.minValue + this.totalAmount
                : this.maxValue;
    }
    calcThickness() {
        return typeof this.thickness === "number" &&
            this.thickness > 0 &&
            this.thickness <= 99
            ? this.thickness
            : 10;
    }
    calcPercentage() {
        return this.value <= this.minValue
            ? 0
            : ((this.value - this.minValue) * 100) /
                (this.maxValueAux - this.minValue);
    }
    /*  In the line gauge type, this functions correctly aligns the
        'current-value' to the center of the 'indicator', even if the indicator
        has low or high percentage value. Also, it makes to not overflow the
        'indicator' from his container when he has low or high values.
    */
    setValueAndIndicatorPosition() {
        const percentage = this.calcPercentage() >= 100 ? 100 : this.calcPercentage();
        // This does not include the gauge padding
        const gaugeWidth = this.linearCurrentValueContainer.getBoundingClientRect()
            .width;
        const distanceToTheValueCenter = (gaugeWidth / 100) * percentage;
        // - - - - - - - - - - -  Current value positioning  - - - - - - - - - - -
        const spanHalfWidth = this.linearCurrentValue.getBoundingClientRect().width / 2;
        // The span is near the left side
        if (distanceToTheValueCenter - spanHalfWidth < 0) {
            this.lineCurrentValuePosition = "Left";
            // The span is near the right side
        }
        else if (distanceToTheValueCenter + spanHalfWidth > gaugeWidth) {
            this.lineCurrentValuePosition = "Right";
            // The span is in an intermediate position
        }
        else {
            this.lineCurrentValuePosition = "Center";
        }
        // - - - - - - - - - - - -  Indicator positioning  - - - - - - - - - - - -
        const indicatorHalfWidth = this.linearIndicator.getBoundingClientRect().width / 2;
        // The indicator is near the left side
        if (distanceToTheValueCenter - indicatorHalfWidth < 0) {
            this.lineIndicatorPosition = "Left";
            // The indicator is near the right side
        }
        else if (distanceToTheValueCenter + indicatorHalfWidth > gaugeWidth) {
            this.lineIndicatorPosition = "Right";
            // The indicator is in an intermediate position
        }
        else {
            this.lineIndicatorPosition = "Center";
        }
    }
    decideLabelsPosition() {
        // This only happens when the component has not yet been rendered to
        // get the `labelsSubContainer` reference
        if (this.labelsOverflow && this.labelsSubContainer == undefined) {
            return;
        }
        const fontSize = this.labelsSubContainer.getBoundingClientRect().height;
        // Depending on the current fontSize, it decides the position where
        // the labels will be placed
        if (fontSize > this.calcThickness() * 2) {
            this.labelsOverflow = true;
        }
        else {
            this.labelsOverflow = false;
        }
    }
    addCircleRanges({ amount, color }, position, radius, childNumber // Identifies the number of child to animate it at the start
    ) {
        const FULL_CIRCLE_RADIANS = 2 * Math.PI;
        const ROTATION_FIX = -90;
        const circleLength = FULL_CIRCLE_RADIANS * radius;
        const range = this.maxValueAux - this.minValue;
        const valuePercentage = amount / range;
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "circle-range", r: radius, cx: "50%", cy: "50%", stroke: color, "stroke-dasharray": `${circleLength * valuePercentage}, ${circleLength}`, transform: `rotate(${position + ROTATION_FIX} 50,50)`, "data-amount": amount, "stroke-width": `${this.calcThickness()}%`, style: {
                "--child-number": childNumber,
                "--stroke-dasharray-initial": `0, ${circleLength}`,
                "--stroke-dasharray": `${circleLength *
                    valuePercentage}, ${circleLength}`
            } }));
    }
    addLineRanges({ amount, color }, position, childNumber // Identifies the number of child to animate it at the start
    ) {
        const range = this.maxValueAux - this.minValue;
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "range", style: {
                "background-color": color,
                "margin-left": `${position}%`,
                "--child-number": childNumber,
                "--range-width": `${(amount * 100) / range}%`
            } }));
    }
    addLineRangesLabels({ amount, color, name }, position, childNumber // Identifies the number of child to animate it at the start
    ) {
        const range = this.maxValueAux - this.minValue;
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "range-label", style: {
                "margin-left": `${position}%`,
                color: color,
                "--child-number": childNumber,
                "--range-width": `${(amount * 100) / range}%`
            } }, name));
    }
    renderCircle(childRanges) {
        const FULL_CIRCLE_RADIO = 100 / 2;
        const svgRanges = [];
        const ONE_PERCENT_OF_CIRCLE_DREGREE = 3.6;
        const radius = FULL_CIRCLE_RADIO - this.calcThickness() / 2;
        const ROTATION_FIX = 90; // Used to correct the rotation
        this.totalAmount = 0;
        for (let i = childRanges.length - 1; i >= 0; i--) {
            this.totalAmount += childRanges[i].amount;
        }
        this.updateMaxValueAux();
        const range = this.maxValueAux - this.minValue;
        let positionInGauge = 0;
        for (let i = 0; i < childRanges.length; i++) {
            svgRanges.push(this.addCircleRanges(childRanges[i], positionInGauge, radius, i.toString()));
            positionInGauge += (360 * childRanges[i].amount) / range;
        }
        const rotation = this.calcPercentage() == 100
            ? `rotate(${359.5 + ROTATION_FIX}deg)`
            : `rotate(${this.calcPercentage() * ONE_PERCENT_OF_CIRCLE_DREGREE +
                ROTATION_FIX}deg)`;
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, { "data-readonly": true }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "circle-gauge-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "svg-and-indicator-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { viewBox: "0 0 100 100" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "background-circle", r: radius, cx: "50%", cy: "50%", "stroke-width": `${this.calcThickness()}%`, ref: el => (this.SVGcircle = el) }), svgRanges), this.showValue && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "indicator-container", style: {
                transform: rotation
            } }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "indicator", style: {
                width: `${this.calcThickness() + 2}%`
            } })))), this.showValue && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "current-value-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "current-value", ref: el => (this.circleCurrentValue = el) }, this.value))))));
    }
    renderLine(childRanges) {
        const divRanges = [];
        const divRangesLabel = [];
        this.totalAmount = 0;
        for (let i = childRanges.length - 1; i >= 0; i--) {
            this.totalAmount += childRanges[i].amount;
        }
        this.updateMaxValueAux();
        const range = this.maxValueAux - this.minValue;
        let positionInGauge = 0;
        for (let i = 0; i < childRanges.length; i++) {
            divRanges.push(this.addLineRanges(childRanges[i], positionInGauge, i.toString()));
            divRangesLabel.push(this.addLineRangesLabels(childRanges[i], positionInGauge, i.toString()));
            positionInGauge += (100 * childRanges[i].amount) / range;
        }
        const percentage = this.calcPercentage() >= 100 ? 100 : this.calcPercentage();
        return ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.H, { "data-readonly": true }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "line-gauge-container", style: { "--percentage": `${percentage}%` } }, this.showValue && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "current-value-container", ref: el => (this.linearCurrentValueContainer = el) }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
                "current-value": true,
                "center-align": this.lineCurrentValuePosition === "Center",
                "right-align": this.lineCurrentValuePosition === "Right"
            }, ref: el => (this.linearCurrentValue = el) }, this.value))), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ranges-labels-and-indicator-container", style: {
                height: `${2 * this.calcThickness() + (this.showValue ? 4 : 0)}px`
            } }, this.showValue && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                indicator: true,
                "center-align": this.lineIndicatorPosition === "Center",
                "right-align": this.lineIndicatorPosition === "Right"
            }, ref: el => (this.linearIndicator = el) })), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ranges-and-labels-container", style: {
                "border-radius": `${this.calcThickness()}px`
            } }, divRanges, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "labels-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "labels-subcontainer", ref: el => (this.labelsSubContainer = el) }, !this.labelsOverflow && divRangesLabel)))), (this.labelsOverflow || this.showMinMax) && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "min-max-and-labels-container" }, this.labelsOverflow && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "labels-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "labels-subcontainer" }, divRangesLabel))), this.showMinMax && ((0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "min-max-values-container" }, (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "min-value" }, this.minValue), (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "max-value" }, this.maxValueAux))))))));
    }
    render() {
        const childRanges = Array.from(this.element.querySelectorAll("gx-gauge-range"));
        if (this.type === "circle") {
            return this.renderCircle(childRanges);
        }
        else if (this.type === "line") {
            return this.renderLine(childRanges);
        }
        else {
            // tslint:disable-next-line:no-console
            console.warn("Error rendering component. Invalid type of gauge in ", this.element);
        }
    }
    get element() { return (0,_index_10623738_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
    static get watchers() { return {
        "type": ["typeHandler"],
        "showValue": ["showValueHandler"],
        "thickness": ["labelsPositionHandler"]
    }; }
};
Gauge.style = gaugeCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_genexus_web-controls-library_dist_esm_gx-gauge_entry_js.js.map